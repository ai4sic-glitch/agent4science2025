Starting analysis loop for CSV: ./data/08_multiscale_features_simple_clean.csv
User description: The goal is to predict redvine disease in 2024 using data before Aug 2024. The resulting model will be used to predict future redvine disease. The presence column in the dataset is an average presence/absence of grape vine at grid points, no matter infected or not.
Using DeepSeek model: deepseek-chat
Max iterations allowed: 20
Experiment Notes: 0901 dataset, vine-wise, 30 papers, for 2025 map.

=== Analysis iteration 1 ===

Response from DeepSeek:
Label: redvine_count_2024
Features: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, Presence_2024.06.04, Presence_2024.07.10, longitude, latitude
Note: Handle missing values in 2025 columns (not needed for prediction), ensure consistent date formats, check for spatial autocorrelation. Target appears count-based - consider Poisson regression or classification thresholding.
The reason for this modeling suggestion: Historical redvine counts and girdle presence are strong disease indicators, while 2024 vegetation indices and canopy metrics provide current health status before August. Spatial coordinates may capture environmental patterns. The count nature suggests regression, but class imbalance may require classification if thresholding disease presence.
ML Agent Coding Attempt 1...
Saved generated code to gen_code/generated_analysis_20250902124241689991.py
Running generated script...
Model trained successfully.

Generated report from ML agent:
 Dropping 33934 rows with missing values
Features used for modeling:
1. redvine_count_2021
2. redvine_count_2022
3. redvine_count_2023
4. girdle_presence_2023
5. EVI_2024.06.04
6. EVI_2024.07.10
7. CanopyArea_2024.06.04
8. CanopyArea_2024.07.10
9. Presence_2024.06.04
10. Presence_2024.07.10
11. longitude
12. latitude

Target: redvine_count_2024

Training samples: 210044
Test samples: 52511
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1

=== Evaluation Results ===
Mean Squared Error: 0.0331
Mean Absolute Error: 0.0461
R² Score: 0.5027

=== Model Leaderboard ===
          rank  ensemble_weight                 type      cost  duration
model_id                                                                
125          1              1.0  k_nearest_neighbors  0.516187  1.551119

=== Best Model ===
{125: {'model_id': 125, 'rank': 1, 'cost': 0.5161871348228284, 'ensemble_weight': 1.0, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f649e05e1f0>, 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f64bf180250>, 'regressor': <autosklearn.pipeline.components.regression.RegressorChoice object at 0x7f64bf180790>, 'sklearn_regressor': KNeighborsRegressor(n_neighbors=20, p=1, weights='distance')}}

Biological evaluation:
The model shows moderate predictive performance (R²=0.50) but lacks biological depth. The selected features capture historical disease presence and basic canopy metrics but miss critical epidemiological factors. From the literature, redvine disease (likely GRBV) involves vector-mediated spread (Spissistilus festinus), latency periods, and physiological changes detectable via spectral analysis.

Key improvements needed:
- Incorporate spatial clustering features (distance to infected neighbors)
- Add temporal progression metrics from previous years' EVI/Canopy data
- Include vector population indicators or environmental covariates
- Utilize spectral indices beyond basic EVI that detect pre-symptomatic infection

The current approach underutilizes the available multi-temporal remote sensing data and spatial relationships critical for virus epidemiology.

=== Analysis iteration 2 ===

Response from DeepSeek:
Decision: continue
Features: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, Presence_2024.06.04, Presence_2024.07.10, longitude, latitude, EVI_2023.07.30, CanopyArea_2023.07.30, Presence_2023.07.30, EVI_2022.08.04, CanopyArea_2022.08.04, Presence_2022.08.04
Note: Add 2023 summer and 2022 late season vegetation metrics to capture historical health patterns. Consider creating spatial lag features for redvine counts from neighboring vines. Try classification approach with threshold (redvine_count_2024 > 0) as binary target to handle count distribution. Set time limit to 300 seconds.
The reason for this modeling suggestion: The moderate R² (0.50) suggests room for improvement. Adding multi-year vegetation metrics can capture disease progression patterns and pre-symptomatic changes. Spatial lag features would account for disease spread dynamics. The binary classification approach may better handle the zero-inflated count distribution typical of disease incidence data.
ML Agent Coding Attempt 1...
Saved generated code to gen_code/generated_analysis_20250902124600345638.py
Running generated script...
Model trained successfully.

Generated report from ML agent:
 	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
Features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'Presence_2024.06.04', 'Presence_2024.07.10', 'longitude', 'latitude', 'EVI_2023.07.30', 'CanopyArea_2023.07.30', 'Presence_2023.07.30', 'EVI_2022.08.04', 'CanopyArea_2022.08.04', 'Presence_2022.08.04']

Classification Report:
              precision    recall  f1-score   support

           0       0.97      1.00      0.98     11691
           1       0.59      0.12      0.20       449

    accuracy                           0.96     12140
   macro avg       0.78      0.56      0.59     12140
weighted avg       0.95      0.96      0.95     12140


Confusion Matrix:
[[11654    37]
 [  395    54]]

Auto-sklearn models:
{3: {'model_id': 3, 'rank': 1, 'cost': 0.03469934102141681, 'ensemble_weight': 0.02, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc85a96c370>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc85aea3910>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc85adadc10>, 'sklearn_classifier': ExtraTreesClassifier(bootstrap=True, max_features=100, min_samples_leaf=2,
                     min_samples_split=9, n_estimators=512, n_jobs=1,
                     random_state=1, warm_start=True)}, 12: {'model_id': 12, 'rank': 2, 'cost': 0.03603789126853374, 'ensemble_weight': 0.58, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc859abcd60>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc83c42f9d0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc83c42f430>, 'sklearn_classifier': AdaBoostClassifier(algorithm='SAMME',
                   base_estimator=DecisionTreeClassifier(max_depth=5),
                   learning_rate=0.9772078202526538, n_estimators=418,
                   random_state=1)}, 17: {'model_id': 17, 'rank': 3, 'cost': 0.035728995057660584, 'ensemble_weight': 0.14, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc85d5e7d90>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc796c70ee0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc796c702e0>, 'sklearn_classifier': AdaBoostClassifier(algorithm='SAMME',
                   base_estimator=DecisionTreeClassifier(max_depth=7),
                   learning_rate=0.4034077156997028, n_estimators=280,
                   random_state=1)}, 30: {'model_id': 30, 'rank': 4, 'cost': 0.03500823723228996, 'ensemble_weight': 0.08, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc859bc1a90>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc7958e27c0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc85a791c40>, 'sklearn_classifier': KNeighborsClassifier(n_neighbors=2)}, 44: {'model_id': 44, 'rank': 5, 'cost': 0.03490527182866554, 'ensemble_weight': 0.06, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc796c69040>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc7958b84c0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc7958b8400>, 'sklearn_classifier': KNeighborsClassifier(n_neighbors=6)}, 68: {'model_id': 68, 'rank': 6, 'cost': 0.034493410214168074, 'ensemble_weight': 0.04, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc85ae22550>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc7971dfca0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc7971df2e0>, 'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=4, n_estimators=512,
                       n_jobs=1, random_state=1, warm_start=True)}, 85: {'model_id': 85, 'rank': 7, 'cost': 0.03542009884678743, 'ensemble_weight': 0.04, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc7b44e9c70>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc7961661f0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc796166fa0>, 'sklearn_classifier': AdaBoostClassifier(algorithm='SAMME',
                   base_estimator=DecisionTreeClassifier(max_depth=7),
                   learning_rate=0.11686061394292119, n_estimators=422,
                   random_state=1)}, 134: {'model_id': 134, 'rank': 8, 'cost': 0.035111202635914385, 'ensemble_weight': 0.02, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc796c828b0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc83c656370>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc859ba4fd0>, 'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=2,
                       min_samples_split=19, n_estimators=512, n_jobs=1,
                       random_state=1, warm_start=True)}, 139: {'model_id': 139, 'rank': 9, 'cost': 0.035111202635914385, 'ensemble_weight': 0.02, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc85d8f28b0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc7b40bd760>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc850200b80>, 'sklearn_classifier': RandomForestClassifier(bootstrap=False, max_features=2, min_samples_leaf=2,
                       min_samples_split=18, n_estimators=512, n_jobs=1,
                       random_state=1, warm_start=True)}}

Biological evaluation:
The model shows poor recall for disease detection (12%), indicating it's missing most infections. This is biologically problematic since redvine disease has spatial and temporal progression patterns not adequately captured. The feature selection includes relevant historical disease counts but misses critical spatial context and temporal patterns in spectral data.

Key improvements needed:
1. Incorporate spatial features (distance to infected neighbors, spatial clustering metrics)
2. Add temporal change features (EVI/CanopyArea deltas between timepoints)
3. Include phenological timing considerations (veraison periods when symptoms manifest)
4. Address class imbalance with appropriate sampling techniques

The current approach underutilizes the available spectral-temporal data and spatial relationships critical for plant disease epidemiology.

=== Analysis iteration 3 ===

Response from DeepSeek:
Decision: continue
Features: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, Presence_2024.06.04, Presence_2024.07.10, longitude, latitude, EVI_2023.07.30, CanopyArea_2023.07.30, Presence_2023.07.30, EVI_2022.08.04, CanopyArea_2022.08.04, Presence_2022.08.04, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, EVI_delta_2022_to_2023, CanopyArea_delta_2022_to_2023
Note: Create temporal delta features: EVI_delta_2023_to_2024 = EVI_2024.07.10 - EVI_2023.07.30, CanopyArea_delta_2023_to_2024 = CanopyArea_2024.07.10 - CanopyArea_2023.07.30, EVI_delta_2022_to_2023 = EVI_2023.07.30 - EVI_2022.08.04, CanopyArea_delta_2022_to_2023 = CanopyArea_2023.07.30 - CanopyArea_2022.08.04. These capture year-to-year health changes. Use classification with threshold (redvine_count_2024 > 0) but implement SMOTE for class imbalance. Set time limit to 300 seconds.
The reason for this modeling suggestion: The previous classification approach showed poor recall (12%) due to severe class imbalance. Adding temporal delta features captures disease progression patterns and physiological decline that may precede symptom appearance. SMOTE will help address the class imbalance issue. The classification framing remains appropriate as the biological question is fundamentally about disease presence/absence detection, but requires better handling of the imbalanced data structure.
ML Agent Coding Attempt 1...
Saved generated code to gen_code/generated_analysis_20250902125244452076.py
Running generated script...
Model trained successfully.

Generated report from ML agent:
 Features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'Presence_2024.06.04', 'Presence_2024.07.10', 'longitude', 'latitude', 'EVI_2023.07.30', 'CanopyArea_2023.07.30', 'Presence_2023.07.30', 'EVI_2022.08.04', 'CanopyArea_2022.08.04', 'Presence_2022.08.04', 'EVI_delta_2023_to_2024', 'CanopyArea_delta_2023_to_2024', 'EVI_delta_2022_to_2023', 'CanopyArea_delta_2022_to_2023']

Classification Report:
              precision    recall  f1-score   support

           0       0.97      0.97      0.97     11691
           1       0.30      0.31      0.30       449

    accuracy                           0.95     12140
   macro avg       0.63      0.64      0.64     12140
weighted avg       0.95      0.95      0.95     12140


Auto-sklearn models: {2: {'model_id': 2, 'rank': 1, 'cost': 0.021811183577461812, 'ensemble_weight': 1.0, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f24bfb6fb20>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f24bfb6fbe0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f24bfb6fd00>, 'sklearn_classifier': RandomForestClassifier(max_features=4, n_estimators=512, n_jobs=1,
                       random_state=1, warm_start=True)}}

Biological evaluation:
The model shows strong performance for healthy vines but poor detection of infected vines (F1=0.30), suggesting insufficient biological signal capture. The feature set includes valuable historical disease counts and spatial data, but lacks critical epidemiological factors.

Key improvements needed: Incorporate temporal disease progression patterns (latency periods, secondary spread dynamics), vector presence data (Spissistilus festinus activity), and environmental covariates (temperature, precipitation lag effects). The current spectral features (EVI, canopy area) may not sufficiently capture pre-symptomatic physiological changes associated with GRBV infection.

Focus on features that directly reflect the virus's impact on vine physiology (sugar translocation inhibition, photosynthetic alterations) and spatial aggregation patterns indicative of vector-mediated spread.

=== Analysis iteration 4 ===

Response from DeepSeek:
Decision: continue
Features: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, Presence_2024.06.04, Presence_2024.07.10, longitude, latitude, EVI_2023.07.30, CanopyArea_2023.07.30, Presence_2023.07.30, EVI_2022.08.04, CanopyArea_2022.08.04, Presence_2022.08.04, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, EVI_delta_2022_to_2023, CanopyArea_delta_2022_to_2023, spatial_lag_redvine_2023, spatial_lag_redvine_2022
Note: Add spatial lag features for redvine counts (average redvine_count from nearest 5 neighbors using latitude/longitude coordinates). Use classification with threshold (redvine_count_2024 > 0) and implement weighted class balancing instead of SMOTE. Set time limit to 240 seconds. Consider creating interaction terms between spatial lag and temporal delta features.
The reason for this modeling suggestion: The previous iteration showed improved recall (31%) but still insufficient for disease detection. Spatial lag features are biologically critical for vector-borne diseases like GRBV, capturing neighborhood infection pressure and spread patterns. Weighted class balancing may perform better than SMOTE for spatial-temporal data. Interaction terms between spatial and temporal features could capture the combined effect of neighborhood infection pressure and vine health decline.
ML Agent Coding Attempt 1...
Saved generated code to gen_code/generated_analysis_20250902125952850980.py
Running generated script...
Model trained successfully.

Generated report from ML agent:
 Features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'Presence_2024.06.04', 'Presence_2024.07.10', 'longitude', 'latitude', 'EVI_2023.07.30', 'CanopyArea_2023.07.30', 'Presence_2023.07.30', 'EVI_2022.08.04', 'CanopyArea_2022.08.04', 'Presence_2022.08.04', 'spatial_lag_redvine_2023', 'spatial_lag_redvine_2022', 'EVI_delta_2023_to_2024', 'CanopyArea_delta_2023_to_2024', 'EVI_delta_2022_to_2023', 'CanopyArea_delta_2022_to_2023', 'spatial_lag_redvine_2022_EVI_delta_2022_to_2023_interaction', 'spatial_lag_redvine_2022_EVI_delta_2023_to_2024_interaction', 'spatial_lag_redvine_2022_CanopyArea_delta_2022_to_2023_interaction', 'spatial_lag_redvine_2022_CanopyArea_delta_2023_to_2024_interaction', 'spatial_lag_redvine_2023_EVI_delta_2022_to_2023_interaction', 'spatial_lag_redvine_2023_EVI_delta_2023_to_2024_interaction', 'spatial_lag_redvine_2023_CanopyArea_delta_2022_to_2023_interaction', 'spatial_lag_redvine_2023_CanopyArea_delta_2023_to_2024_interaction']
Dataset shape: (296489, 32)
Class distribution: {0: 287463, 1: 9026}
Class weights: {0: 1.0, 1: 31.847389558232933}

=== Model Evaluation ===
              precision    recall  f1-score   support

           0       0.98      0.92      0.95     57493
           1       0.17      0.51      0.25      1805

    accuracy                           0.91     59298
   macro avg       0.57      0.71      0.60     59298
weighted avg       0.96      0.91      0.93     59298


Confusion Matrix:
[[52876  4617]
 [  891   914]]

=== Auto-sklearn Leaderboard ===
          rank  ensemble_weight          type      cost  duration
model_id                                                         
5            1             0.78           qda  0.339613  7.772674
28           2             0.22  bernoulli_nb  0.378345  6.813714

=== Best Model ===
{5: {'model_id': 5, 'rank': 1, 'cost': 0.3396128178569251, 'ensemble_weight': 0.78, 'voting_model': VotingClassifier(estimators=None, voting='soft'), 'estimators': [{'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f886f710760>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f886f51e1f0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f886f51e220>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.9656157556996962)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f886ceca490>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f886cea8c10>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f886cea8d00>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.9656157556996962)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f886cd8c9a0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f886cd091c0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f886cd092b0>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.9656157556996962)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f886cc4ff10>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f886cbc7730>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f886cbc7820>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.9656157556996962)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f886cac14c0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f886ca8aca0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f886ca8ad90>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.9656157556996962)}]}, 28: {'model_id': 28, 'rank': 2, 'cost': 0.3783452396675462, 'ensemble_weight': 0.22, 'voting_model': VotingClassifier(estimators=None, voting='soft'), 'estimators': [{'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f880a0038e0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f886cfb4460>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f886cfb45b0>, 'sklearn_classifier': BernoulliNB(alpha=0.5364480799936838)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f886ccc24f0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f886cc931f0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f886cc932b0>, 'sklearn_classifier': BernoulliNB(alpha=0.5364480799936838)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f886caa6250>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f886c9f84f0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f886c9f85b0>, 'sklearn_classifier': BernoulliNB(alpha=0.5364480799936838)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f8866615280>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f88665cc640>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f88665cc730>, 'sklearn_classifier': BernoulliNB(alpha=0.5364480799936838)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f8866536340>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f88664efb20>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f88664efc10>, 'sklearn_classifier': BernoulliNB(alpha=0.5364480799936838)}]}}

Biological evaluation:
The model shows moderate biological relevance with spatial-temporal features but has poor precision (0.17) for disease detection. The high false positive rate suggests insufficient spectral discrimination of pre-symptomatic infections. 

Biologically, EVI and canopy metrics alone lack specificity for redvine disease detection. Incorporate hyperspectral indices (e.g., flavonol or chlorophyll indices) that better capture physiological stress responses. Prioritize features from veraison period when physiological changes are most pronounced. Consider vector proximity metrics given Spissistilus festinus' role in secondary spread. 

Simplify the feature set by removing redundant spatial interactions and focus on validated spectral biomarkers from vineyard pathology literature.

=== Analysis iteration 5 ===

Response from DeepSeek:
Decision: continue
Features: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, Presence_2024.06.04, Presence_2024.07.10, longitude, latitude, spatial_lag_redvine_2023, spatial_lag_redvine_2022, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, EVI_delta_2022_to_2023, CanopyArea_delta_2022_to_2023, EVI_2024.07.10_CanopyArea_2024.07.10_interaction, EVI_2023.07.30_CanopyArea_2023.07.30_interaction
Note: Remove complex spatial interaction terms that may be causing overfitting. Add simpler interaction terms between EVI and CanopyArea for each timepoint to capture combined physiological status. Use classification with threshold (redvine_count_2024 > 0) and implement class weighting. Set time limit to 180 seconds. Consider trying a different algorithm family (e.g., gradient boosting) if available.
The reason for this modeling suggestion: The previous iteration showed improved recall (51%) but poor precision (17%), indicating too many false positives. The complex spatial interaction terms may be overfitting. Simplified EVI-CanopyArea interactions better capture the combined physiological status that might indicate disease stress. Maintaining the spatial lag features is crucial for vector-borne disease spread patterns, while reducing feature complexity may improve model generalization.
ML Agent Coding Attempt 1...
Saved generated code to gen_code/generated_analysis_20250902130547251129.py
Running generated script...
Model trained successfully.

Generated report from ML agent:
 Warning: Feature 'spatial_lag_redvine_2023' not found in dataset
Warning: Feature 'spatial_lag_redvine_2022' not found in dataset
Warning: Feature 'EVI_delta_2023_to_2024' not found in dataset
Warning: Feature 'CanopyArea_delta_2023_to_2024' not found in dataset
Warning: Feature 'EVI_delta_2022_to_2023' not found in dataset
Warning: Feature 'CanopyArea_delta_2022_to_2023' not found in dataset
Features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'Presence_2024.06.04', 'Presence_2024.07.10', 'longitude', 'latitude', 'EVI_CanopyArea_interaction_2024_06', 'EVI_CanopyArea_interaction_2024_07']

Classification Report:
              precision    recall  f1-score   support

           0       0.98      0.98      0.98     50707
           1       0.51      0.57      0.54      1804

    accuracy                           0.97     52511
   macro avg       0.75      0.78      0.76     52511
weighted avg       0.97      0.97      0.97     52511


Auto-sklearn models:
{7: {'model_id': 7, 'rank': 1, 'cost': 0.45370042398784405, 'ensemble_weight': 0.02, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fa3b4ae1a90>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fa3b4fb9370>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fa3b41cab50>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.585497512341966)}, 14: {'model_id': 14, 'rank': 2, 'cost': 0.4401899153123522, 'ensemble_weight': 0.5, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fa3b5b95b50>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fa3b4d3d250>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fa3b43097f0>, 'sklearn_classifier': AdaBoostClassifier(algorithm='SAMME',
                   base_estimator=DecisionTreeClassifier(max_depth=2),
                   learning_rate=1.7653851967971248, n_estimators=290,
                   random_state=1)}, 24: {'model_id': 24, 'rank': 3, 'cost': 0.2707643799440853, 'ensemble_weight': 0.06, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fa3b5101490>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fa3b8dcebb0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fa3b8dce040>, 'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=4, min_samples_leaf=2,
                     min_samples_split=19, n_estimators=512, n_jobs=1,
                     random_state=1, warm_start=True)}, 28: {'model_id': 28, 'rank': 4, 'cost': 0.3174197194948851, 'ensemble_weight': 0.08, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fa4178586d0>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fa3b54a2a00>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fa3b54a2400>, 'sklearn_classifier': DecisionTreeClassifier(class_weight='balanced', criterion='entropy',
                       max_depth=679, min_samples_leaf=15, min_samples_split=10,
                       random_state=1)}, 41: {'model_id': 41, 'rank': 5, 'cost': 0.4626796433128666, 'ensemble_weight': 0.02, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fa3b46906d0>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fa3a83732e0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fa3a83737f0>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.8675367602485742)}, 50: {'model_id': 50, 'rank': 6, 'cost': 0.5059544513323702, 'ensemble_weight': 0.02, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fa3b7509820>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fa3b589d730>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fa417c31fa0>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.3636527602143046)}, 54: {'model_id': 54, 'rank': 7, 'cost': 0.3116249563958049, 'ensemble_weight': 0.06, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fa3b52b0d00>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fa417da73a0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fa3b59b9400>, 'sklearn_classifier': KNeighborsClassifier(n_neighbors=2, p=1, weights='distance')}, 57: {'model_id': 57, 'rank': 8, 'cost': 0.2551130798854788, 'ensemble_weight': 0.12, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fa3b025e730>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fa3b4b833d0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fa3b87c6550>, 'sklearn_classifier': ExtraTreesClassifier(bootstrap=True, max_features=2, min_samples_split=11,
                     n_estimators=512, n_jobs=1, random_state=1,
                     warm_start=True)}, 65: {'model_id': 65, 'rank': 9, 'cost': 0.29963937096395044, 'ensemble_weight': 0.04, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fa417c46ac0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fa3b750b4f0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fa3b61168e0>, 'sklearn_classifier': KNeighborsClassifier(n_neighbors=19, weights='distance')}, 80: {'model_id': 80, 'rank': 10, 'cost': 0.2857760057654313, 'ensemble_weight': 0.04, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fa379f6a190>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fa38816c910>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fa3b485f940>, 'sklearn_classifier': KNeighborsClassifier()}, 87: {'model_id': 87, 'rank': 11, 'cost': 0.320435264838574, 'ensemble_weight': 0.02, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fa379f6a910>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fa3a80df4c0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fa3b426a6a0>, 'sklearn_classifier': KNeighborsClassifier(n_neighbors=67)}, 98: {'model_id': 98, 'rank': 12, 'cost': 0.4626667475865358, 'ensemble_weight': 0.02, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fa380138880>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fa3b0267f70>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fa3b0267fa0>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.8928935753396892)}}

Biological evaluation:
The model shows reasonable performance but has biological limitations. The low F1-score (0.54) for disease detection suggests insufficient capture of epidemiological patterns. Missing spatial lag features indicate inadequate incorporation of dispersal dynamics critical for redvine disease spread. The model relies heavily on recent EVI/canopy data without sufficient historical disease progression context.

Improvements: Incorporate actual spatial lag features using latitude/longitude to model disease gradients. Add temporal disease progression metrics (AUDPC-like features from 2021-2023 counts). Include interaction terms between historical infection status and current vegetation indices, as prior infection significantly influences susceptibility. Focus on features that capture the spatiotemporal epidemic patterns characteristic of vector-borne diseases.

=== Analysis iteration 6 ===

Response from DeepSeek:
Decision: continue
Features: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, Presence_2024.06.04, Presence_2024.07.10, longitude, latitude, EVI_2023.07.30, CanopyArea_2023.07.30, Presence_2023.07.30, EVI_2022.08.04, CanopyArea_2022.08.04, Presence_2022.08.04, spatial_lag_redvine_2023, spatial_lag_redvine_2022, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, EVI_delta_2022_to_2023, CanopyArea_delta_2022_to_2023
Note: Re-add spatial lag and delta features that were missing in iteration 5. Use classification (redvine_count_2024 > 0) with class weighting. Set time limit to 300 seconds. Consider creating a cumulative disease pressure feature: weighted_sum_prior_counts = 0.5*redvine_count_2021 + 0.7*redvine_count_2022 + 0.9*redvine_count_2023 to reflect increasing relevance of recent infections.
The reason for this modeling suggestion: The previous iteration showed promising recall (57%) but suffered from missing critical spatial and temporal features. Spatial lag features are biologically essential for vector-borne disease spread patterns, while temporal deltas capture disease progression. The cumulative disease pressure feature reflects the epidemiological reality that recent infections have greater predictive power for future outbreaks. Maintaining classification with weighting addresses the severe class imbalance while focusing on disease detection.
ML Agent Coding Attempt 1...
Saved generated code to gen_code/generated_analysis_20250902131044459228.py
Running generated script...
Script failed with error:
Traceback (most recent call last):
  File "gen_code/generated_analysis_20250902131044459228.py", line 89, in <module>
    main()
  File "gen_code/generated_analysis_20250902131044459228.py", line 86, in main
    print(automl.show_models())
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/site-packages/autosklearn/estimators.py", line 888, in show_models
    return self.automl_.show_models()
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/site-packages/autosklearn/automl.py", line 2173, in show_models
    table_dict[model_id]["ensemble_weight"] = weight
KeyError: 1

ML Agent Coding Attempt 2...
Saved generated code to gen_code/generated_analysis_20250902131648644713.py
Running generated script...
Model trained successfully.

Generated report from ML agent:
 Warning: Missing features: {'CanopyArea_delta_2023_to_2024', 'spatial_lag_redvine_2023', 'EVI_delta_2023_to_2024', 'CanopyArea_delta_2022_to_2023', 'EVI_delta_2022_to_2023', 'spatial_lag_redvine_2022'}
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
Available features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'Presence_2024.06.04', 'Presence_2024.07.10', 'longitude', 'latitude', 'EVI_2023.07.30', 'CanopyArea_2023.07.30', 'Presence_2023.07.30', 'EVI_2022.08.04', 'CanopyArea_2022.08.04', 'Presence_2022.08.04', 'weighted_sum_prior_counts']

Classification Report:
              precision    recall  f1-score   support

           0       0.98      1.00      0.99     57493
           1       0.73      0.34      0.46      1805

    accuracy                           0.98     59298
   macro avg       0.85      0.67      0.73     59298
weighted avg       0.97      0.98      0.97     59298


Confusion Matrix:
[[57261   232]
 [ 1188   617]]

Leaderboard:
          rank  ensemble_weight           type      cost    duration
model_id                                                            
2            1              1.0  random_forest  0.023584  124.237271

Biological evaluation:
The model shows strong overall accuracy but poor detection of infected vines (recall=0.34), indicating it's primarily identifying healthy vines. The reliance on historical redvine counts creates temporal bias and limits predictive capability for new infections.

Biologically, the model misses key epidemiological factors: spatial patterns of disease spread, vector presence (Spissistilus festinus), and spectral indicators of pre-symptomatic infection. The presence of girdling damage (girdle_presence_2023) is underutilized despite its known association with disease.

Improve by incorporating: spatial autocorrelation metrics, vector population data, and hyperspectral indices from prior years that capture physiological changes before symptom expression. Focus on features that reflect actual infection mechanisms rather than just historical presence counts.

=== Analysis iteration 7 ===

Response from DeepSeek:
Decision: continue
Features: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, Presence_2024.06.04, Presence_2024.07.10, longitude, latitude, EVI_2023.07.30, CanopyArea_2023.07.30, Presence_2023.07.30, EVI_2022.08.04, CanopyArea_2022.08.04, Presence_2022.08.04, spatial_lag_redvine_2023, spatial_lag_redvine_2022, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, EVI_delta_2022_to_2023, CanopyArea_delta_2022_to_2023, weighted_sum_prior_counts, spatial_lag_weighted_sum
Note: Ensure spatial lag features are properly computed using latitude/longitude coordinates (average of nearest 5 neighbors). Create EVI_delta_2023_to_2024 = EVI_2024.07.10 - EVI_2023.07.30, CanopyArea_delta_2023_to_2024 = CanopyArea_2024.07.10 - CanopyArea_2023.07.30, EVI_delta_2022_to_2023 = EVI_2023.07.30 - EVI_2022.08.04, CanopyArea_delta_2022_to_2023 = CanopyArea_2023.07.30 - CanopyArea_2022.08.04. Use classification (redvine_count_2024 > 0) with class weighting. Set time limit to 300 seconds. Add spatial_lag_weighted_sum as spatial average of weighted_sum_prior_counts from neighbors.
The reason for this modeling suggestion: The previous iteration showed poor recall (34%) for disease detection despite good overall accuracy. The missing spatial lag and delta features are critical for capturing vector-borne disease spread patterns and temporal progression. The weighted_sum_prior_counts reflects epidemiological relevance of recent infections, and adding its spatial lag captures neighborhood disease pressure. These features address the biological mechanisms of redvine disease spread while maintaining computational feasibility.
ML Agent Coding Attempt 1...
Saved generated code to gen_code/generated_analysis_20250902132407824412.py
Running generated script...
Model trained successfully.

Generated report from ML agent:
 	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
Features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'longitude', 'latitude', 'EVI_2023.07.30', 'CanopyArea_2023.07.30', 'EVI_2022.08.04', 'CanopyArea_2022.08.04', 'EVI_delta_2023_to_2024', 'CanopyArea_delta_2023_to_2024', 'EVI_delta_2022_to_2023', 'CanopyArea_delta_2022_to_2023', 'weighted_sum_prior_counts', 'spatial_lag_redvine_2023', 'spatial_lag_redvine_2022', 'spatial_lag_weighted_sum']

Classification Report:
              precision    recall  f1-score   support

           0       0.98      1.00      0.99     57493
           1       0.73      0.34      0.47      1805

    accuracy                           0.98     59298
   macro avg       0.86      0.67      0.73     59298
weighted avg       0.97      0.98      0.97     59298


Confusion Matrix:
[[57267   226]
 [ 1184   621]]

Auto-sklearn leaderboard:
          rank  ensemble_weight type      cost    duration
model_id                                                  
49           1              1.0  mlp  0.023814  143.334334

Biological evaluation:
The model shows strong overall accuracy but poor recall for disease detection (34%), indicating it misses many infected vines. This is biologically problematic since epidemiological principles show disease spread depends on spatial proximity and historical patterns. The feature set appropriately includes spatial lags and temporal deltas, but may lack key epidemiological variables like vector presence data or more granular temporal resolution during critical infection periods.

Improvements: Incorporate vector population data (Spissistilus festinus presence/activity) and precipitation/temperature variables with appropriate time lags (3-4 year lag for precipitation effects). Focus on spectral indices beyond EVI that better capture physiological stress responses specific to red blotch virus infection.

=== Analysis iteration 8 ===

Response from DeepSeek:
Decision: continue
Features: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, longitude, latitude, spatial_lag_redvine_2023, spatial_lag_redvine_2022, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, EVI_delta_2022_to_2023, CanopyArea_delta_2022_to_2023, weighted_sum_prior_counts, spatial_lag_weighted_sum, EVI_2024.07.10_CanopyArea_2024.07.10_interaction, EVI_2023.07.30_CanopyArea_2023.07.30_interaction
Note: Add interaction terms between EVI and CanopyArea for 2024.07 and 2023.07 timepoints to capture combined physiological stress indicators. Use classification (redvine_count_2024 > 0) with class weighting. Set time limit to 240 seconds. Consider trying gradient boosting algorithms if available, as they may better capture complex interactions.
The reason for this modeling suggestion: The model shows persistent poor recall (34%) despite incorporating spatial and temporal features. Adding EVI-CanopyArea interaction terms may better capture the combined physiological stress response to infection. The classification framing remains appropriate given the binary nature of disease detection, and class weighting addresses the imbalance. The 240-second time limit balances exploration with efficiency.
ML Agent Coding Attempt 1...
Saved generated code to gen_code/generated_analysis_20250902133247424346.py
Running generated script...
Model trained successfully.

Generated report from ML agent:
 Features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'longitude', 'latitude', 'EVI_2024.07.10_CanopyArea_2024.07.10_interaction', 'EVI_2023.07.30_CanopyArea_2023.07.30_interaction']
Training samples: 237191, Test samples: 59298
Class distribution - Train: [229970   7221], Test: [57493  1805]

Classification Report:
              precision    recall  f1-score   support

           0       0.98      0.99      0.99     57493
           1       0.60      0.48      0.53      1805

    accuracy                           0.97     59298
   macro avg       0.79      0.73      0.76     59298
weighted avg       0.97      0.97      0.97     59298


Final ensemble:
{36: {'model_id': 36, 'rank': 1, 'cost': 0.506707710827387, 'ensemble_weight': 0.46, 'voting_model': VotingClassifier(estimators=None, voting='soft'), 'estimators': [{'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb7b06c5ca0>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb7dc0bf2e0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb7dc0bfdf0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.001960435544762734, average=True, max_iter=16,
                            random_state=1, tol=0.046231160255636165,
                            warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb7e7b41a60>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb7a85c7fd0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb7a85c7040>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.001960435544762734, average=True, max_iter=16,
                            random_state=1, tol=0.046231160255636165,
                            warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb7dc36c1c0>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb7e78ac490>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb7e78ac100>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.001960435544762734, average=True, max_iter=16,
                            random_state=1, tol=0.046231160255636165,
                            warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb7dc7d0a60>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb7dc129610>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb7dc1296a0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.001960435544762734, average=True, max_iter=16,
                            random_state=1, tol=0.046231160255636165,
                            warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb7b01963a0>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb7dc336640>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb7dc3367f0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.001960435544762734, average=True, max_iter=16,
                            random_state=1, tol=0.046231160255636165,
                            warm_start=True)}]}, 56: {'model_id': 56, 'rank': 2, 'cost': 0.44812538193530194, 'ensemble_weight': 0.06, 'voting_model': VotingClassifier(estimators=None, voting='soft'), 'estimators': [{'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb7b049eca0>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb7a1f489a0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb7a1f488b0>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.2526327000902143)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb7d7f00880>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb7a0b9d070>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb7a0b9dcd0>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.2526327000902143)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb7b875af70>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb7a82b2e80>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb7a82b25b0>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.2526327000902143)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb7b0629d00>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb7e78e9550>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb7e78e97f0>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.2526327000902143)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb7b8785460>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb851245ee0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb851245d90>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.2526327000902143)}]}, 58: {'model_id': 58, 'rank': 3, 'cost': 0.25696589187043717, 'ensemble_weight': 0.48, 'voting_model': VotingClassifier(estimators=None, voting='soft'), 'estimators': [{'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb7d7a957c0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb7a1085490>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb7a10853d0>, 'sklearn_classifier': DecisionTreeClassifier(criterion='entropy', max_depth=12, min_samples_leaf=19,
                       min_samples_split=8, random_state=1)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb851476f70>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb85125e460>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb85125e550>, 'sklearn_classifier': DecisionTreeClassifier(criterion='entropy', max_depth=12, min_samples_leaf=19,
                       min_samples_split=8, random_state=1)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb7e44e66d0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb8516fb790>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb7dc342520>, 'sklearn_classifier': DecisionTreeClassifier(criterion='entropy', max_depth=12, min_samples_leaf=19,
                       min_samples_split=8, random_state=1)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb8514881f0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb8514e4fa0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb8514e4a90>, 'sklearn_classifier': DecisionTreeClassifier(criterion='entropy', max_depth=12, min_samples_leaf=19,
                       min_samples_split=8, random_state=1)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb8515203d0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb851507910>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb851507700>, 'sklearn_classifier': DecisionTreeClassifier(criterion='entropy', max_depth=12, min_samples_leaf=19,
                       min_samples_split=8, random_state=1)}]}}

Biological evaluation:
The model shows strong overall accuracy but poor performance for disease detection (F1=0.53), indicating limited biological relevance. The features lack critical epidemiological predictors: spatial spread patterns, vector presence (Spissistilus festinus), and temporal disease progression dynamics. EVI and canopy area alone cannot reliably distinguish disease-induced stress from other factors.

Improve by incorporating: 1) spatial autocorrelation metrics from neighboring vines, 2) vector population data, 3) multi-year symptom progression patterns, and 4) spectral indices specifically sensitive to viral infection (e.g., chlorophyll fluorescence). Focus on features that capture the secondary spread dynamics characteristic of GRBV epidemiology.

=== Analysis iteration 9 ===

Response from DeepSeek:
Decision: continue
Features: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, longitude, latitude, spatial_lag_redvine_2023, spatial_lag_redvine_2022, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, EVI_delta_2022_to_2023, CanopyArea_delta_2022_to_2023, weighted_sum_prior_counts, spatial_lag_weighted_sum, EVI_2024.07.10_CanopyArea_2024.07.10_interaction, EVI_2023.07.30_CanopyArea_2023.07.30_interaction, block_variety, vineSpace
Note: Add block_variety and vineSpace as potential susceptibility factors. Ensure spatial lag features are properly computed using k-nearest neighbors (k=5) with latitude/longitude coordinates. Use classification (redvine_count_2024 > 0) with class weighting. Set time limit to 300 seconds. Try gradient boosting algorithms specifically if available.
The reason for this modeling suggestion: The persistent poor recall (34-48%) indicates missing critical epidemiological factors. Block variety may affect susceptibility to redvine disease, and vine spacing influences microclimate conditions favorable for vector spread. These biological factors combined with the existing spatial-temporal features may better capture the complex disease dynamics while maintaining computational feasibility within the time constraints.
ML Agent Coding Attempt 1...
Saved generated code to gen_code/generated_analysis_20250902133844656132.py
Running generated script...
Model trained successfully.

Generated report from ML agent:
 Warning: Missing features: ['spatial_lag_redvine_2023', 'spatial_lag_redvine_2022', 'EVI_delta_2023_to_2024', 'CanopyArea_delta_2023_to_2024', 'EVI_delta_2022_to_2023', 'CanopyArea_delta_2022_to_2023', 'weighted_sum_prior_counts', 'spatial_lag_weighted_sum', 'EVI_2024.07.10_CanopyArea_2024.07.10_interaction', 'EVI_2023.07.30_CanopyArea_2023.07.30_interaction']
Class distribution:
target_binary
0    287463
1      9026
Name: count, dtype: int64

Training set size: 237191
Test set size: 59298
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1

=== Model Evaluation ===

Classification Report:
              precision    recall  f1-score   support

           0       0.98      1.00      0.99     57493
           1       0.59      0.20      0.30      1805

    accuracy                           0.97     59298
   macro avg       0.78      0.60      0.64     59298
weighted avg       0.96      0.97      0.96     59298


Confusion Matrix:
[[57237   256]
 [ 1436   369]]

=== Model Details ===
auto-sklearn results:
  Dataset name: ad4f5969-8823-11f0-8c19-2704aa562b65
  Metric: accuracy
  Best validation score: 0.970594
  Number of target algorithm runs: 25
  Number of successful target algorithm runs: 14
  Number of crashed target algorithm runs: 4
  Number of target algorithms that exceeded the time limit: 6
  Number of target algorithms that exceeded the memory limit: 1


Best model:
{16: {'model_id': 16, 'rank': 1, 'cost': 0.02940618478467083, 'ensemble_weight': 1.0, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbe9ee9b400>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbe9ecd0f70>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbe9ecd0730>, 'sklearn_classifier': KNeighborsClassifier(n_neighbors=4, p=1)}}

Features used:
1. redvine_count_2021
2. redvine_count_2022
3. redvine_count_2023
4. girdle_presence_2023
5. EVI_2024.06.04
6. EVI_2024.07.10
7. CanopyArea_2024.06.04
8. CanopyArea_2024.07.10
9. longitude
10. latitude
11. vineSpace
12. block_variety_encoded

Biological evaluation:
The model shows poor recall for disease detection (20%), indicating it misses most infections. While using historical counts and spatial data is epidemiologically sound, the missing engineered features suggest incomplete feature utilization.

Biologically, grapevine viruses like GRBV show spectral changes before symptoms. The model should incorporate:
- EVI/CanopyArea temporal deltas (2023-2024) to capture growth anomalies
- Spatial lags to account for vector-mediated spread patterns
- Hyperspectral indices beyond EVI (e.g., chlorophyll-sensitive indices)
- Vector pressure indicators from surrounding vines

The current approach underutilizes known epidemiological drivers of virus spread. Focus on pre-symptomatic physiological changes and spatial patterns for earlier detection.

=== Analysis iteration 10 ===

Response from DeepSeek:
Decision: continue
Features: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, longitude, latitude, EVI_2023.07.30, CanopyArea_2023.07.30, EVI_2022.08.04, CanopyArea_2022.08.04, spatial_lag_redvine_2023, spatial_lag_redvine_2022, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, EVI_delta_2022_to_2023, CanopyArea_delta_2022_to_2023, weighted_sum_prior_counts, spatial_lag_weighted_sum, block_variety, vineSpace
Note: Ensure spatial lag features are properly computed using k-nearest neighbors (k=5) with latitude/longitude. Compute deltas: EVI_delta_2023_to_2024 = EVI_2024.07.10 - EVI_2023.07.30, CanopyArea_delta_2023_to_2024 = CanopyArea_2024.07.10 - CanopyArea_2023.07.30, EVI_delta_2022_to_2023 = EVI_2023.07.30 - EVI_2022.08.04, CanopyArea_delta_2022_to_2023 = CanopyArea_2023.07.30 - CanopyArea_2022.08.04. Use classification (redvine_count_2024 > 0) with class weighting. Set time limit to 300 seconds. Try gradient boosting algorithms specifically.
The reason for this modeling suggestion: The persistent poor recall (20-48%) indicates missing critical epidemiological factors. Spatial lag features and temporal deltas are essential for capturing vector-borne disease spread patterns and physiological progression. Block variety and vine spacing may affect susceptibility and microclimate conditions. These features combined address the complex disease dynamics while maintaining computational feasibility. Gradient boosting may better capture the complex interactions in this high-dimensional feature space.
ML Agent Coding Attempt 1...
Saved generated code to gen_code/generated_analysis_20250902134552065679.py
Running generated script...
Model trained successfully.

Generated report from ML agent:
 Features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'longitude', 'latitude', 'EVI_2023.07.30', 'CanopyArea_2023.07.30', 'EVI_2022.08.04', 'CanopyArea_2022.08.04', 'spatial_lag_redvine_2023', 'spatial_lag_redvine_2022', 'EVI_delta_2023_to_2024', 'CanopyArea_delta_2023_to_2024', 'EVI_delta_2022_to_2023', 'CanopyArea_delta_2022_to_2023', 'weighted_sum_prior_counts', 'spatial_lag_weighted_sum', 'block_variety', 'vineSpace']

Classification Report:
              precision    recall  f1-score   support

           0       0.98      1.00      0.99     57493
           1       0.73      0.34      0.47      1805

    accuracy                           0.98     59298
   macro avg       0.86      0.67      0.73     59298
weighted avg       0.97      0.98      0.97     59298


Auto-sklearn models: {7: {'model_id': 7, 'rank': 1, 'cost': 0.02562792242634848, 'ensemble_weight': 0.02, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2442def670>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2442b3f6d0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2442b3fc40>, 'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=1,
                       min_samples_leaf=14, min_samples_split=12,
                       n_estimators=512, n_jobs=1, random_state=1,
                       warm_start=True)}, 11: {'model_id': 11, 'rank': 2, 'cost': 0.025167999591179657, 'ensemble_weight': 0.02, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f24410af280>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2441619a00>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2443106e80>, 'sklearn_classifier': MLPClassifier(activation='tanh', alpha=0.0288316953521873, beta_1=0.999,
              beta_2=0.9, hidden_layer_sizes=(91,),
              learning_rate_init=0.0002309951929622804, max_iter=128,
              n_iter_no_change=32, random_state=1, validation_fraction=0.0,
              verbose=0, warm_start=True)}, 13: {'model_id': 13, 'rank': 3, 'cost': 0.02481028183049283, 'ensemble_weight': 0.04, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f244211de50>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2445b99ee0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2441ff9d30>, 'sklearn_classifier': MLPClassifier(activation='tanh', alpha=0.004046109807229298, beta_1=0.999,
              beta_2=0.9, hidden_layer_sizes=(17, 17, 17),
              learning_rate_init=0.00010292125690429162, max_iter=128,
              n_iter_no_change=32, random_state=1, validation_fraction=0.0,
              verbose=0, warm_start=True)}, 21: {'model_id': 21, 'rank': 4, 'cost': 0.023417737690676343, 'ensemble_weight': 0.1, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f244141e5b0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f24b4692520>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f24b4692220>, 'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=7, min_samples_split=3,
                     n_estimators=512, n_jobs=1, random_state=1,
                     warm_start=True)}, 60: {'model_id': 60, 'rank': 5, 'cost': 0.028144722385466392, 'ensemble_weight': 0.1, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2442fbac40>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f23f241b520>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2442563370>, 'sklearn_classifier': DecisionTreeClassifier(max_depth=22, min_samples_leaf=7, min_samples_split=9,
                       random_state=1)}, 66: {'model_id': 66, 'rank': 6, 'cost': 0.02670107570840896, 'ensemble_weight': 0.04, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f24203a6b50>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f24b46f5fd0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2440321c70>, 'sklearn_classifier': DecisionTreeClassifier(max_depth=22, min_samples_leaf=20, min_samples_split=16,
                       random_state=1)}, 85: {'model_id': 85, 'rank': 7, 'cost': 0.024695301121700708, 'ensemble_weight': 0.32, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2438171100>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f23f2551460>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2442ef2820>, 'sklearn_classifier': AdaBoostClassifier(algorithm='SAMME',
                   base_estimator=DecisionTreeClassifier(max_depth=6),
                   learning_rate=0.10946770404121296, n_estimators=60,
                   random_state=1)}, 86: {'model_id': 86, 'rank': 8, 'cost': 0.023749904182742698, 'ensemble_weight': 0.04, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f244135cd30>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f24b468ca00>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f24b468c730>, 'sklearn_classifier': ExtraTreesClassifier(max_features=7, min_samples_leaf=12, min_samples_split=9,
                     n_estimators=512, n_jobs=1, random_state=1,
                     warm_start=True)}, 87: {'model_id': 87, 'rank': 9, 'cost': 0.025576819889107538, 'ensemble_weight': 0.04, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f23f010bd60>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f23f39cef70>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f23f3a0f040>, 'sklearn_classifier': ExtraTreesClassifier(bootstrap=True, criterion='entropy', max_features=3,
                     min_samples_leaf=2, min_samples_split=14, n_estimators=512,
                     n_jobs=1, random_state=1, warm_start=True)}, 94: {'model_id': 94, 'rank': 10, 'cost': 0.026509441193755312, 'ensemble_weight': 0.04, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f23f084e310>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f23f143b6d0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f23f143b730>, 'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=3, n_estimators=512,
                     n_jobs=1, random_state=1, warm_start=True)}, 101: {'model_id': 101, 'rank': 11, 'cost': 0.02657331936530649, 'ensemble_weight': 0.1, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f23f0935a30>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f23f27d55e0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f23f27dd490>, 'sklearn_classifier': DecisionTreeClassifier(criterion='entropy', max_depth=19, min_samples_leaf=12,
                       min_samples_split=15, random_state=1)}, 120: {'model_id': 120, 'rank': 12, 'cost': 0.02399264123463729, 'ensemble_weight': 0.14, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f23f39d57f0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f240030dca0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2441873910>, 'sklearn_classifier': ExtraTreesClassifier(bootstrap=True, max_features=6, min_samples_leaf=14,
                     min_samples_split=14, n_estimators=512, n_jobs=1,
                     random_state=1, warm_start=True)}}

Biological evaluation:
The model shows poor recall (0.34) for disease detection despite good overall accuracy, indicating it's missing many true infections. The feature set is overly complex with redundant temporal and spatial lag features that may not capture key biological signals.

Biologically, redvine disease (likely GRBV) has known spectral signatures in EVI/CanopyArea that manifest before visual symptoms. Focus on the most predictive 2024 pre-August features (EVI and CanopyArea from June/July) combined with prior infection history and spatial proximity to known infections. Simplify to core epidemiological drivers: recent spectral changes, infection history, and spatial context.

Reduce feature complexity and prioritize features that directly reflect physiological changes from viral infection and spatial spread patterns.

=== Analysis iteration 11 ===

Response from DeepSeek:
Decision: continue
Features: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, longitude, latitude, spatial_lag_redvine_2023, spatial_lag_redvine_2022, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, block_variety
Note: Simplify feature set to core epidemiological drivers. Focus on 2024 pre-August spectral data (June/July EVI and CanopyArea), historical infection counts, spatial lags (k=5 neighbors), and 2023-2024 deltas. Use classification (redvine_count_2024 > 0) with class weighting. Set time limit to 240 seconds. Try gradient boosting specifically to capture complex interactions while maintaining interpretability.
The reason for this modeling suggestion: Previous iterations show persistent poor recall (34%) despite complex feature sets. The simplified approach focuses on the most biologically relevant features: recent spectral changes (2024 data before August), historical infection pressure, spatial spread patterns, and cultivar susceptibility. This reduces overfitting while maintaining critical epidemiological drivers for GRBV detection.
ML Agent Coding Attempt 1...
Saved generated code to gen_code/generated_analysis_20250902135457986881.py
Running generated script...
Script failed with error:
Process pynisher function call:
Traceback (most recent call last):
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/multiprocessing/process.py", line 315, in _bootstrap
    self.run()
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/site-packages/pynisher/limit_function_call.py", line 133, in subprocess_func
    return_value = ((func(*args, **kwargs), 0))
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/site-packages/autosklearn/smbo.py", line 160, in _calculate_metafeatures_encoded
    result = calculate_all_metafeatures_encoded_labels(
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/site-packages/autosklearn/metalearning/metafeatures/metafeatures.py", line 1115, in calculate_all_metafeatures_encoded_labels
    return calculate_all_metafeatures(
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/site-packages/autosklearn/metalearning/metafeatures/metafeatures.py", line 1194, in calculate_all_metafeatures
    X_transformed = DPP.fit_transform(X)
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/site-packages/sklearn/utils/_set_output.py", line 157, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/site-packages/sklearn/base.py", line 916, in fit_transform
    return self.fit(X, **fit_params).transform(X)
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/site-packages/autosklearn/pipeline/components/data_preprocessing/feature_type.py", line 216, in fit
    self.column_transformer.fit(X, y)
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/site-packages/sklearn/compose/_column_transformer.py", line 717, in fit
    self.fit_transform(X, y=y)
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/site-packages/sklearn/utils/_set_output.py", line 157, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/site-packages/sklearn/base.py", line 1152, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/site-packages/sklearn/compose/_column_transformer.py", line 754, in fit_transform
    result = self._fit_transform(X, y, _fit_transform_one)
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/site-packages/sklearn/compose/_column_transformer.py", line 681, in _fit_transform
    return Parallel(n_jobs=self.n_jobs)(
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/site-packages/sklearn/utils/parallel.py", line 65, in __call__
    return super().__call__(iterable_with_config)
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/site-packages/joblib/parallel.py", line 1918, in __call__
    return output if self.return_generator else list(output)
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/site-packages/joblib/parallel.py", line 1847, in _get_sequential_output
    res = func(*args, **kwargs)
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/site-packages/sklearn/utils/parallel.py", line 127, in __call__
    return self.function(*args, **kwargs)
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/site-packages/sklearn/pipeline.py", line 957, in _fit_transform_one
    res = transformer.fit_transform(X, y, **fit_params)
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/site-packages/sklearn/base.py", line 1152, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/site-packages/sklearn/pipeline.py", line 471, in fit_transform
    Xt = self._fit(X, y, **fit_params_steps)
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/site-packages/sklearn/pipeline.py", line 377, in _fit
    X, fitted_transformer = fit_transform_one_cached(
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/site-packages/joblib/memory.py", line 312, in __call__
    return self.func(*args, **kwargs)
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/site-packages/sklearn/pipeline.py", line 957, in _fit_transform_one
    res = transformer.fit_transform(X, y, **fit_params)
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/site-packages/sklearn/utils/_set_output.py", line 157, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/site-packages/sklearn/base.py", line 916, in fit_transform
    return self.fit(X, **fit_params).transform(X)
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/site-packages/autosklearn/pipeline/components/data_preprocessing/imputation/categorical_imputation.py", line 58, in fit
    self.preprocessor.fit(X)
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/site-packages/sklearn/base.py", line 1152, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/site-packages/sklearn/impute/_base.py", line 369, in fit
    X = self._validate_input(X, in_fit=True)
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/site-packages/sklearn/impute/_base.py", line 340, in _validate_input
    raise ValueError(
ValueError: SimpleImputer does not support data with dtype bool. Please provide either a numeric array (with a floating point or integer dtype) or categorical data represented either as an array with integer dtype or an array of string values with an object dtype.
Traceback (most recent call last):
  File "gen_code/generated_analysis_20250902135457986881.py", line 90, in <module>
    main()
  File "gen_code/generated_analysis_20250902135457986881.py", line 65, in main
    print(automl.show_models())
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/site-packages/autosklearn/estimators.py", line 888, in show_models
    return self.automl_.show_models()
  File "/home/kiyoda/anaconda3/envs/gps-automl/lib/python3.8/site-packages/autosklearn/automl.py", line 2168, in show_models
    raise RuntimeError(
RuntimeError: No model found. Try increasing 'time_left_for_this_task'.

ML Agent Coding Attempt 2...
Saved generated code to gen_code/generated_analysis_20250902135931496171.py
Running generated script...
Script failed with error:
Traceback (most recent call last):
  File "gen_code/generated_analysis_20250902135931496171.py", line 50, in <module>
    main()
  File "gen_code/generated_analysis_20250902135931496171.py", line 19, in main
    X = df[features].copy()
  File "/home/kiyoda/.local/lib/python3.8/site-packages/pandas/core/frame.py", line 3767, in __getitem__
    indexer = self.columns._get_indexer_strict(key, "columns")[1]
  File "/home/kiyoda/.local/lib/python3.8/site-packages/pandas/core/indexes/base.py", line 5877, in _get_indexer_strict
    self._raise_if_missing(keyarr, indexer, axis_name)
  File "/home/kiyoda/.local/lib/python3.8/site-packages/pandas/core/indexes/base.py", line 5941, in _raise_if_missing
    raise KeyError(f"{not_found} not in index")
KeyError: "['spatial_lag_redvine_2023', 'spatial_lag_redvine_2022', 'EVI_delta_2023_to_2024', 'CanopyArea_delta_2023_to_2024'] not in index"

ML Agent Coding Attempt 3...
Saved generated code to gen_code/generated_analysis_20250902140018366122.py
Running generated script...
Model trained successfully.

Generated report from ML agent:
 Features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'longitude', 'latitude', 'EVI_delta_2023_to_2024', 'CanopyArea_delta_2023_to_2024', 'spatial_lag_redvine_2023', 'spatial_lag_redvine_2022', 'block_variety_encoded']

Classification Report:
              precision    recall  f1-score   support

           0       0.99      0.86      0.92     41294
           1       0.14      0.65      0.23      1474

    accuracy                           0.85     42768
   macro avg       0.56      0.76      0.58     42768
weighted avg       0.96      0.85      0.89     42768


Confusion Matrix:
[[35463  5831]
 [  509   965]]

Auto-sklearn models:
{5: {'model_id': 5, 'rank': 1, 'cost': 0.3741146289499544, 'ensemble_weight': 0.1, 'voting_model': VotingClassifier(estimators=None, voting='soft'), 'estimators': [{'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2d839f1760>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cdeced5b0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cdcbf9460>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.9656157556996962)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2d1d40a850>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cec6da3a0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cec6da910>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.9656157556996962)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2d1a5890a0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cf4072d90>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cf4072970>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.9656157556996962)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cec6ce610>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cf41b0ca0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cf41b0be0>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.9656157556996962)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2d839abe20>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2ce4402fa0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2ce44020a0>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.9656157556996962)}]}, 28: {'model_id': 28, 'rank': 2, 'cost': 0.4506903092941577, 'ensemble_weight': 0.04, 'voting_model': VotingClassifier(estimators=None, voting='soft'), 'estimators': [{'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cd762d880>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cf4048e80>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cf4048430>, 'sklearn_classifier': SGDClassifier(alpha=7.314043281217936e-06, eta0=0.0026470891518782036,
              l1_ratio=0.7454137881296051, learning_rate='invscaling',
              max_iter=256, penalty='elasticnet', power_t=0.9722767658247132,
              random_state=1, tol=4.22266504248996e-05, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cddbee190>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2d1a038160>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2d1a038430>, 'sklearn_classifier': SGDClassifier(alpha=7.314043281217936e-06, eta0=0.0026470891518782036,
              l1_ratio=0.7454137881296051, learning_rate='invscaling',
              max_iter=256, penalty='elasticnet', power_t=0.9722767658247132,
              random_state=1, tol=4.22266504248996e-05, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cec6fa220>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2d1068a790>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cf41ab040>, 'sklearn_classifier': SGDClassifier(alpha=7.314043281217936e-06, eta0=0.0026470891518782036,
              l1_ratio=0.7454137881296051, learning_rate='invscaling',
              max_iter=256, penalty='elasticnet', power_t=0.9722767658247132,
              random_state=1, tol=4.22266504248996e-05, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cd7de47f0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cfc61b730>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cfc61b970>, 'sklearn_classifier': SGDClassifier(alpha=7.314043281217936e-06, eta0=0.0026470891518782036,
              l1_ratio=0.7454137881296051, learning_rate='invscaling',
              max_iter=256, penalty='elasticnet', power_t=0.9722767658247132,
              random_state=1, tol=4.22266504248996e-05, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cfc675430>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2d1073e640>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2d1073e610>, 'sklearn_classifier': SGDClassifier(alpha=7.314043281217936e-06, eta0=0.0026470891518782036,
              l1_ratio=0.7454137881296051, learning_rate='invscaling',
              max_iter=256, penalty='elasticnet', power_t=0.9722767658247132,
              random_state=1, tol=4.22266504248996e-05, warm_start=True)}]}, 34: {'model_id': 34, 'rank': 3, 'cost': 0.25654079139887875, 'ensemble_weight': 0.16, 'voting_model': VotingClassifier(estimators=None, voting='soft'), 'estimators': [{'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2d19212af0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cd7de4940>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cdc21e910>, 'sklearn_classifier': GaussianNB()}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cdde3b3a0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2d101f0a00>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2d101f08e0>, 'sklearn_classifier': GaussianNB()}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cdf55d970>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cdf547520>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cdf547b20>, 'sklearn_classifier': GaussianNB()}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cec040d30>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cf42e6880>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cf42e6430>, 'sklearn_classifier': GaussianNB()}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2d1ad923a0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cf4062130>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cf4062490>, 'sklearn_classifier': GaussianNB()}]}, 41: {'model_id': 41, 'rank': 4, 'cost': 0.3288878532668624, 'ensemble_weight': 0.14, 'voting_model': VotingClassifier(estimators=None, voting='soft'), 'estimators': [{'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cd735a340>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cdc89f370>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cdcdd56d0>, 'sklearn_classifier': DecisionTreeClassifier(class_weight='balanced', max_depth=1,
                       min_samples_leaf=14, min_samples_split=16,
                       random_state=1)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cdf547c40>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2d106a0b80>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2d106a0640>, 'sklearn_classifier': DecisionTreeClassifier(class_weight='balanced', max_depth=1,
                       min_samples_leaf=14, min_samples_split=16,
                       random_state=1)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cec381520>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cec6da130>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cec6da310>, 'sklearn_classifier': DecisionTreeClassifier(class_weight='balanced', max_depth=1,
                       min_samples_leaf=14, min_samples_split=16,
                       random_state=1)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2d104df8b0>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2d105fce20>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2d1a076d30>, 'sklearn_classifier': DecisionTreeClassifier(class_weight='balanced', max_depth=1,
                       min_samples_leaf=14, min_samples_split=16,
                       random_state=1)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cfc6e3b80>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2d837bdd30>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2d837bdd00>, 'sklearn_classifier': DecisionTreeClassifier(class_weight='balanced', max_depth=1,
                       min_samples_leaf=14, min_samples_split=16,
                       random_state=1)}]}, 44: {'model_id': 44, 'rank': 5, 'cost': 0.3334336763440272, 'ensemble_weight': 0.44, 'voting_model': VotingClassifier(estimators=None, voting='soft'), 'estimators': [{'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cd76aa190>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cdd437ca0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cdd437550>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.00018928266410163868, average=True,
                            loss='squared_hinge', max_iter=16, random_state=1,
                            tol=0.008177434956213786, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cf4073d30>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cf41b4370>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cf41b4430>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.00018928266410163868, average=True,
                            loss='squared_hinge', max_iter=16, random_state=1,
                            tol=0.008177434956213786, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2d19782970>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2d1ace67f0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2d1ace6bb0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.00018928266410163868, average=True,
                            loss='squared_hinge', max_iter=16, random_state=1,
                            tol=0.008177434956213786, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2d18fcd610>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2d836e9460>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2d836e9a90>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.00018928266410163868, average=True,
                            loss='squared_hinge', max_iter=16, random_state=1,
                            tol=0.008177434956213786, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cfc4c7a30>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cfc5fb400>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cfc61b790>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.00018928266410163868, average=True,
                            loss='squared_hinge', max_iter=16, random_state=1,
                            tol=0.008177434956213786, warm_start=True)}]}, 51: {'model_id': 51, 'rank': 6, 'cost': 0.35025979571997745, 'ensemble_weight': 0.06, 'voting_model': VotingClassifier(estimators=None, voting='soft'), 'estimators': [{'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cdc673040>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cddd3adc0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cddd3acd0>, 'sklearn_classifier': DecisionTreeClassifier(criterion='entropy', max_depth=15, min_samples_split=11,
                       random_state=1)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2d1042e880>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2d102c93d0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2d102c96a0>, 'sklearn_classifier': DecisionTreeClassifier(criterion='entropy', max_depth=15, min_samples_split=11,
                       random_state=1)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2d8380ed60>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cfc55f550>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cfc55feb0>, 'sklearn_classifier': DecisionTreeClassifier(criterion='entropy', max_depth=15, min_samples_split=11,
                       random_state=1)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cdcbfca90>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cfc675100>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cfc675370>, 'sklearn_classifier': DecisionTreeClassifier(criterion='entropy', max_depth=15, min_samples_split=11,
                       random_state=1)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2d106cc730>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cf408c400>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cf408c550>, 'sklearn_classifier': DecisionTreeClassifier(criterion='entropy', max_depth=15, min_samples_split=11,
                       random_state=1)}]}, 54: {'model_id': 54, 'rank': 7, 'cost': 0.25655592695290064, 'ensemble_weight': 0.06, 'voting_model': VotingClassifier(estimators=None, voting='soft'), 'estimators': [{'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cdcb87eb0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cdf1b7d30>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cdf1b7bb0>, 'sklearn_classifier': GaussianNB()}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cfc5fb520>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2d83815610>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2d83815a00>, 'sklearn_classifier': GaussianNB()}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2d19da6100>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cdc26f820>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cdc26f7f0>, 'sklearn_classifier': GaussianNB()}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cddebd5b0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2d1d5244f0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2d1d524460>, 'sklearn_classifier': GaussianNB()}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2d18b7f3d0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2d1a748970>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2d1a748fd0>, 'sklearn_classifier': GaussianNB()}]}}

Auto-sklearn leaderboard:
          rank  ensemble_weight                type      cost   duration
model_id                                                                
34           1             0.16         gaussian_nb  0.256541   9.911626
54           2             0.06         gaussian_nb  0.256556   9.811985
41           3             0.14       decision_tree  0.328888  16.362670
44           4             0.44  passive_aggressive  0.333434  10.028356
51           5             0.06       decision_tree  0.350260  14.846099
5            6             0.10                 qda  0.374115   9.241405
28           7             0.04                 sgd  0.450690  28.362978

Biological evaluation:
The model shows poor performance for disease detection (precision 0.14, recall 0.65), indicating limited biological relevance. The features used lack critical epidemiological predictors: spatial context (neighbor infection status), temporal disease progression patterns, and spectral indicators of physiological stress.

Key improvements needed:
- Incorporate spatial autocorrelation metrics from neighboring vines
- Add temporal features showing disease progression patterns
- Include spectral vegetation indices sensitive to plant stress
- Account for vector transmission patterns and environmental factors
- Address class imbalance with appropriate sampling techniques

The current feature set misses fundamental epidemiological drivers of red blotch virus spread, particularly the spatial aggregation patterns and physiological changes that precede symptom expression.

=== Analysis iteration 12 ===

Response from DeepSeek:
Decision: continue
Features: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, longitude, latitude, spatial_lag_redvine_2023, spatial_lag_redvine_2022, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, block_variety, vineSpace, EVI_2024.07.10_CanopyArea_2024.07.10_interaction, EVI_2023.07.30_CanopyArea_2023.07.30_interaction
Note: Focus on classification (redvine_count_2024 > 0) with class weighting. Ensure spatial lag features are properly computed using k=5 nearest neighbors with latitude/longitude. Compute deltas: EVI_delta_2023_to_2024 = EVI_2024.07.10 - EVI_2023.07.30, CanopyArea_delta_2023_to_2024 = CanopyArea_2024.07.10 - CanopyArea_2023.07.30. Set time limit to 300 seconds. Try gradient boosting specifically to capture complex interactions while maintaining interpretability.
The reason for this modeling suggestion: The persistent poor recall (34-65%) across iterations indicates missing critical epidemiological factors. This simplified yet comprehensive feature set combines the most biologically relevant elements: recent spectral changes (2024 data before August), historical infection pressure, spatial spread patterns, cultivar susceptibility, and vine spacing effects. The classification framing remains appropriate for disease detection, and gradient boosting may better capture the complex interactions in this high-dimensional feature space while addressing the severe class imbalance.
ML Agent Coding Attempt 1...
Saved generated code to gen_code/generated_analysis_20250902140724960154.py
Running generated script...
Model trained successfully.

Generated report from ML agent:
 	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
Features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'longitude', 'latitude', 'spatial_lag_redvine_2023', 'spatial_lag_redvine_2022', 'EVI_delta_2023_to_2024', 'CanopyArea_delta_2023_to_2024', 'vineSpace', 'EVI_2024.07.10_CanopyArea_2024.07.10_interaction', 'EVI_2023.07.30_CanopyArea_2023.07.30_interaction', 'block_variety_encoded']

Classification Report:
              precision    recall  f1-score   support

           0       0.97      1.00      0.98     41267
           1       0.58      0.13      0.21      1474

    accuracy                           0.97     42741
   macro avg       0.78      0.56      0.60     42741
weighted avg       0.96      0.97      0.96     42741


Confusion Matrix:
[[41132   135]
 [ 1287   187]]

Auto-sklearn leaderboard:
          rank  ensemble_weight           type    cost  duration
model_id                                                        
12           1              1.0  decision_tree  0.0322  3.585879

Biological evaluation:
The model shows poor detection of infected vines (recall: 0.13), indicating it fails to capture key biological signals. While spatial and historical features are included, the model lacks critical epidemiological predictors: temporal disease progression patterns, vector presence data (Spissistilus festinus), and spectral indicators of pre-symptomatic infection. The reliance on 2024 EVI and canopy metrics alone is insufficient for early detection.

Improve by incorporating: 1) Time-series analysis of EVI trajectories (2022-2024) to capture disease progress curves, 2) Vector proximity metrics using spatial coordinates, 3) Spectral indices sensitive to physiological changes (e.g., chlorophyll fluorescence), and 4) Vineyard age and management factors. Focus on features that reflect known GRBV epidemiology and pre-visual symptom development.

=== Analysis iteration 13 ===

Response from DeepSeek:
Decision: continue
Features: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, longitude, latitude, spatial_lag_redvine_2023, spatial_lag_redvine_2022, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, block_variety, vineSpace, EVI_2024.07.10_CanopyArea_2024.07.10_interaction, EVI_2023.07.30_CanopyArea_2023.07.30_interaction, EVI_2023.07.30, CanopyArea_2023.07.30, EVI_2022.08.04, CanopyArea_2022.08.04
Note: Re-add 2023.07.30 and 2022.08.04 base features to provide context for delta calculations. Ensure spatial lag features are computed using k=5 nearest neighbors with Euclidean distance on latitude/longitude. Use classification (redvine_count_2024 > 0) with class weighting. Set time limit to 240 seconds. Try gradient boosting specifically to capture complex interactions while maintaining interpretability.
The reason for this modeling suggestion: The persistent poor recall (13-65%) across iterations indicates the model is missing critical temporal context for the delta features. Re-adding the base EVI and CanopyArea values from 2023.07.30 and 2022.08.04 provides the necessary reference points for interpreting the delta values, which may improve the model's ability to detect disease-related physiological changes. This maintains the simplified yet comprehensive approach while addressing potential information loss from delta-only features.
ML Agent Coding Attempt 1...
Saved generated code to gen_code/generated_analysis_20250902141537246294.py
Running generated script...
Script failed with error:
Traceback (most recent call last):
  File "gen_code/generated_analysis_20250902141537246294.py", line 83, in <module>
    main()
  File "gen_code/generated_analysis_20250902141537246294.py", line 48, in main
    X = df[features + ['spatial_lag_redvine_2023', 'spatial_lag_redvine_2022', 'block_variety_encoded']].copy()
  File "/home/kiyoda/.local/lib/python3.8/site-packages/pandas/core/frame.py", line 3767, in __getitem__
    indexer = self.columns._get_indexer_strict(key, "columns")[1]
  File "/home/kiyoda/.local/lib/python3.8/site-packages/pandas/core/indexes/base.py", line 5877, in _get_indexer_strict
    self._raise_if_missing(keyarr, indexer, axis_name)
  File "/home/kiyoda/.local/lib/python3.8/site-packages/pandas/core/indexes/base.py", line 5941, in _raise_if_missing
    raise KeyError(f"{not_found} not in index")
KeyError: "['EVI_delta_2023_to_2024', 'CanopyArea_delta_2023_to_2024', 'EVI_2024.07.10_CanopyArea_2024.07.10_interaction', 'EVI_2023.07.30_CanopyArea_2023.07.30_interaction'] not in index"

ML Agent Coding Attempt 2...
Saved generated code to gen_code/generated_analysis_20250902141734982088.py
Running generated script...
Model trained successfully.

Generated report from ML agent:
 	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
Features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'longitude', 'latitude', 'EVI_2023.07.30', 'CanopyArea_2023.07.30', 'EVI_2022.08.04', 'CanopyArea_2022.08.04', 'vineSpace', 'block_variety', 'EVI_delta_2023_to_2024', 'CanopyArea_delta_2023_to_2024', 'EVI_2024.07.10_CanopyArea_2024.07.10_interaction', 'EVI_2023.07.30_CanopyArea_2023.07.30_interaction', 'spatial_lag_redvine_2023', 'spatial_lag_redvine_2022', 'block_variety_encoded']

Classification Report:
              precision    recall  f1-score   support

           0       0.99      1.00      0.99     58456
           1       0.98      0.69      0.81      2243

    accuracy                           0.99     60699
   macro avg       0.99      0.84      0.90     60699
weighted avg       0.99      0.99      0.99     60699


Biological evaluation:
The results show strong performance but limited biological insight. The model relies heavily on historical infection data (redvine_count_2021-2023) rather than detecting early physiological changes. From epidemiological knowledge, virus infections cause spectral and physiological alterations before visible symptoms appear, but the selected EVI and canopy features don't adequately capture these pre-symptomatic changes.

Improve by: 1) Incorporating spectral indices sensitive to physiological stress (NPQI, flavonol indices) from the pre-August 2024 data, 2) Adding spatial features that account for vector-mediated spread patterns, and 3) Including temporal delta features that capture growth anomalies rather than absolute values. Focus on features that differentiate infected vines during the critical pre-symptomatic phase.

=== Analysis iteration 14 ===

Response from DeepSeek:
Decision: continue
Features: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, longitude, latitude, spatial_lag_redvine_2023, spatial_lag_redvine_2022, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, block_variety, vineSpace, EVI_2024.07.10_CanopyArea_2024.07.10_interaction, EVI_2023.07.30_CanopyArea_2023.07.30_interaction, EVI_2023.07.30, CanopyArea_2023.07.30, EVI_2022.08.04, CanopyArea_2022.08.04
Note: Use classification (redvine_count_2024 > 0) with class weighting. Set time limit to 180 seconds. Try gradient boosting specifically. Ensure spatial lag features are computed using k=5 nearest neighbors with Euclidean distance on latitude/longitude. Consider adding interaction terms between spatial lag features and EVI deltas to capture combined spatial-temporal disease patterns.
The reason for this modeling suggestion: The previous iteration showed excellent performance (F1=0.81 for disease class) but may be overfitting to historical patterns. Maintaining the comprehensive feature set while focusing on gradient boosting may better capture complex interactions. The spatial-temporal interaction terms could better model the vector-borne disease spread dynamics characteristic of redvine disease, while the 180-second limit balances exploration with efficiency.
ML Agent Coding Attempt 1...
Saved generated code to gen_code/generated_analysis_20250902142419350728.py
Running generated script...
Script failed with error:
Traceback (most recent call last):
  File "gen_code/generated_analysis_20250902142419350728.py", line 75, in <module>
    main()
  File "gen_code/generated_analysis_20250902142419350728.py", line 38, in main
    df = df.dropna(subset=features + [target])
  File "/home/kiyoda/.local/lib/python3.8/site-packages/pandas/core/frame.py", line 6407, in dropna
    raise KeyError(np.array(subset)[check].tolist())
KeyError: ['EVI_delta_2023_to_2024', 'CanopyArea_delta_2023_to_2024', 'EVI_2024.07.10_CanopyArea_2024.07.10_interaction', 'EVI_2023.07.30_CanopyArea_2023.07.30_interaction']

ML Agent Coding Attempt 2...
Saved generated code to gen_code/generated_analysis_20250902142511742612.py
Running generated script...
Model trained successfully.

Generated report from ML agent:
 	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
Features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'longitude', 'latitude', 'vineSpace', 'block_variety', 'EVI_2023.07.30', 'CanopyArea_2023.07.30', 'EVI_2022.08.04', 'CanopyArea_2022.08.04', 'spatial_lag_redvine_2023', 'spatial_lag_redvine_2022', 'EVI_delta_2023_to_2024', 'CanopyArea_delta_2023_to_2024', 'EVI_2024.07.10_CanopyArea_2024.07.10_interaction', 'EVI_2023.07.30_CanopyArea_2023.07.30_interaction']

Classification Report:
              precision    recall  f1-score   support

           0       0.96      1.00      0.98     11691
           1       0.25      0.00      0.01       449

    accuracy                           0.96     12140
   macro avg       0.61      0.50      0.49     12140
weighted avg       0.94      0.96      0.95     12140


Auto-sklearn models: {9: {'model_id': 9, 'rank': 1, 'cost': 0.03675864909390447, 'ensemble_weight': 1.0, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f5a69f3aeb0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f5a69db1250>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f5a69ca76d0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.028230610715648558, max_iter=16, random_state=1,
                            tol=0.0008024959726063024, warm_start=True)}}

Biological evaluation:
The results are not biologically meaningful. The model shows near-perfect performance for class 0 (healthy vines) but completely fails to detect diseased vines (recall=0.00 for class 1), indicating severe class imbalance issues and inadequate feature engineering for disease detection.

The model lacks critical epidemiological predictors: temporal disease progression patterns, spatial autocorrelation features that capture disease spread dynamics, and proper spectral indicators of physiological stress. Current features don't adequately represent the latency period, secondary spread mechanisms, or pre-symptomatic spectral changes known from vineyard virus epidemiology.

Improve by: incorporating spatial clustering metrics, calculating epidemic rate parameters from historical counts, adding spectral indices sensitive to viral stress (beyond simple EVI), and implementing proper class balancing techniques. Focus on features that capture the spatiotemporal progression patterns characteristic of grapevine virus spread.

=== Analysis iteration 15 ===

Response from DeepSeek:
Decision: continue
Features: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, longitude, latitude, EVI_2023.07.30, CanopyArea_2023.07.30, EVI_2022.08.04, CanopyArea_2022.08.04, spatial_lag_redvine_2023, spatial_lag_redvine_2022, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, EVI_delta_2022_to_2023, CanopyArea_delta_2022_to_2023, weighted_sum_prior_counts, spatial_lag_weighted_sum, block_variety, vineSpace
Note: Use classification (redvine_count_2024 > 0) with class weighting. Compute spatial lag features using k=5 nearest neighbors with Euclidean distance on latitude/longitude. Compute deltas: EVI_delta_2023_to_2024 = EVI_2024.07.10 - EVI_2023.07.30, CanopyArea_delta_2023_to_2024 = CanopyArea_2024.07.10 - CanopyArea_2023.07.30, EVI_delta_2022_to_2023 = EVI_2023.07.30 - EVI_2022.08.04, CanopyArea_delta_2022_to_2023 = CanopyArea_2023.07.30 - CanopyArea_2022.08.04. Compute weighted_sum_prior_counts = 0.5*redvine_count_2021 + 0.7*redvine_count_2022 + 0.9*redvine_count_2023. Set time limit to 300 seconds. Try gradient boosting algorithms specifically.
The reason for this modeling suggestion: The persistent poor recall across iterations indicates the model is missing critical epidemiological patterns. This comprehensive feature set combines historical infection pressure, spatial spread dynamics (through spatial lags), temporal physiological changes (through deltas), cultivar susceptibility, and vine spacing effects. The classification framing remains appropriate for disease detection, and gradient boosting may better capture the complex interactions in this high-dimensional feature space while addressing the severe class imbalance. The 300-second time limit allows sufficient exploration while maintaining efficiency.
ML Agent Coding Attempt 1...
Saved generated code to gen_code/generated_analysis_20250902143028715753.py
Running generated script...
Model trained successfully.

Generated report from ML agent:
 	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
Features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'longitude', 'latitude', 'EVI_2023.07.30', 'CanopyArea_2023.07.30', 'EVI_2022.08.04', 'CanopyArea_2022.08.04', 'block_variety', 'vineSpace', 'EVI_delta_2023_to_2024', 'CanopyArea_delta_2023_to_2024', 'EVI_delta_2022_to_2023', 'CanopyArea_delta_2022_to_2023', 'weighted_sum_prior_counts', 'spatial_lag_redvine_2023', 'spatial_lag_redvine_2022', 'spatial_lag_weighted_sum']

Classification Report:
              precision    recall  f1-score   support

           0       0.97      1.00      0.98     11691
           1       0.52      0.11      0.18       449

    accuracy                           0.96     12140
   macro avg       0.74      0.55      0.58     12140
weighted avg       0.95      0.96      0.95     12140


Auto-sklearn models:
{121: {'model_id': 121, 'rank': 1, 'cost': 0.03475819032761307, 'ensemble_weight': 1.0, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1042881e20>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1042b51640>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f10429d1df0>, 'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=6,
                       min_samples_leaf=2, min_samples_split=20,
                       n_estimators=512, n_jobs=1, random_state=1,
                       warm_start=True)}}

Biological evaluation:
The model shows poor performance for disease detection (recall=0.11, F1=0.18), indicating insufficient biological signal capture. While spatial and temporal features were included, the model likely misses key epidemiological factors: vector population dynamics, climate influences on pathogen spread, and pre-symptomatic physiological changes detectable through spectral analysis.

Improve by incorporating: vector activity data (Spissistilus festinus presence), climate variables (temperature/precipitation lag effects), and hyperspectral indices beyond basic EVI that capture pre-visual stress responses. Focus on feature selection to prioritize biologically meaningful predictors of GRBV transmission and establishment rather than over-engineering derived features.

=== Analysis iteration 16 ===

Response from DeepSeek:
Decision: continue
Features: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, longitude, latitude, EVI_2023.07.30, CanopyArea_2023.07.30, spatial_lag_redvine_2023, spatial_lag_redvine_2022, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, block_variety, vineSpace
Note: Simplify feature set to core epidemiological drivers. Focus on spatial lags (k=5 neighbors), 2023-2024 deltas, and cultivar/spacing factors. Use classification (redvine_count_2024 > 0) with SMOTE for class imbalance. Set time limit to 240 seconds. Try Random Forest specifically to handle complex interactions while providing feature importance insights.
The reason for this modeling suggestion: Persistent poor recall (11-34%) indicates the model misses critical disease patterns. This simplified yet biologically relevant feature set focuses on spatial spread dynamics (spatial lags), temporal physiological changes (deltas), and host susceptibility factors while reducing overfitting from redundant features. SMOTE addresses severe class imbalance better than class weighting, and Random Forest provides robust handling of interactions while offering interpretability through feature importance.
ML Agent Coding Attempt 1...
Saved generated code to gen_code/generated_analysis_20250902143900551272.py
Running generated script...
Script failed with error:
Traceback (most recent call last):
  File "gen_code/generated_analysis_20250902143900551272.py", line 77, in <module>
    main()
  File "gen_code/generated_analysis_20250902143900551272.py", line 30, in main
    df = df.dropna(subset=features + ['target_binary'])
  File "/home/kiyoda/.local/lib/python3.8/site-packages/pandas/core/frame.py", line 6407, in dropna
    raise KeyError(np.array(subset)[check].tolist())
KeyError: ['spatial_lag_redvine_2023', 'spatial_lag_redvine_2022', 'EVI_delta_2023_to_2024', 'CanopyArea_delta_2023_to_2024']

ML Agent Coding Attempt 2...
Saved generated code to gen_code/generated_analysis_20250902143950593224.py
Running generated script...
Model trained successfully.

Generated report from ML agent:
 Features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'longitude', 'latitude', 'EVI_2023.07.30', 'CanopyArea_2023.07.30', 'block_variety', 'vineSpace', 'block_variety_encoded', 'spatial_lag_redvine_2023', 'spatial_lag_redvine_2022', 'EVI_delta_2023_to_2024', 'CanopyArea_delta_2023_to_2024']

Classification Report:
              precision    recall  f1-score   support

           0       0.97      1.00      0.98     41267
           1       0.69      0.15      0.25      1474

    accuracy                           0.97     42741
   macro avg       0.83      0.57      0.61     42741
weighted avg       0.96      0.97      0.96     42741


Auto-sklearn models:
{3: {'model_id': 3, 'rank': 1, 'cost': 0.03369130343230156, 'ensemble_weight': 0.02, 'voting_model': VotingClassifier(estimators=None, voting='soft'), 'estimators': [{'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f699c3418e0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f698d18a850>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f698d18adc0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.14268277711454813, max_iter=16, random_state=1,
                            tol=0.0002600768160857831, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f69ac3dd3a0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f699c34e1f0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f698ddd1730>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.14268277711454813, max_iter=16, random_state=1,
                            tol=0.0002600768160857831, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f6987c8bcd0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f69871a5340>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f69871a5250>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.14268277711454813, max_iter=16, random_state=1,
                            tol=0.0002600768160857831, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f6994072040>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f69874edd30>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f69874edbb0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.14268277711454813, max_iter=16, random_state=1,
                            tol=0.0002600768160857831, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f69ac659e80>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f699c168c10>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f699c1687f0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.14268277711454813, max_iter=16, random_state=1,
                            tol=0.0002600768160857831, warm_start=True)}]}, 33: {'model_id': 33, 'rank': 2, 'cost': 0.03206523010692308, 'ensemble_weight': 0.78, 'voting_model': VotingClassifier(estimators=None, voting='soft'), 'estimators': [{'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f6a3a76b4f0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f6a3a7a8610>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f6a3a7a8be0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.07868193096453042, loss='squared_hinge',
                            max_iter=32, random_state=1,
                            tol=0.0002748270257765496, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f6a3a6c22e0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f6987e07970>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f6987e07b20>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.07868193096453042, loss='squared_hinge',
                            max_iter=16, random_state=1,
                            tol=0.0002748270257765496, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f69ac5d66a0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f69a42ea2b0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f699c631820>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.07868193096453042, loss='squared_hinge',
                            max_iter=32, random_state=1,
                            tol=0.0002748270257765496, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f6a3a7376d0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f6987e00ca0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f6987736e80>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.07868193096453042, loss='squared_hinge',
                            max_iter=32, random_state=1,
                            tol=0.0002748270257765496, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f6994735bb0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f6994730400>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f6994730a00>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.07868193096453042, loss='squared_hinge',
                            max_iter=16, random_state=1,
                            tol=0.0002748270257765496, warm_start=True)}]}, 64: {'model_id': 64, 'rank': 3, 'cost': 0.03427037271004423, 'ensemble_weight': 0.04, 'voting_model': VotingClassifier(estimators=None, voting='soft'), 'estimators': [{'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f6a3a9d2c10>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f69871b0460>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f69871b06d0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=3.1120319146690886e-05, average=True,
                            loss='squared_hinge', max_iter=16, random_state=1,
                            tol=0.05741570185760213, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f69ac41d400>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f698cf0f5b0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f698cf0ffd0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=3.1120319146690886e-05, average=True,
                            loss='squared_hinge', max_iter=16, random_state=1,
                            tol=0.05741570185760213, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f698d19bf70>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f698d180430>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f698d1808e0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=3.1120319146690886e-05, average=True,
                            loss='squared_hinge', max_iter=16, random_state=1,
                            tol=0.05741570185760213, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f69a4341df0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f69944f7f70>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f69944f76d0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=3.1120319146690886e-05, average=True,
                            loss='squared_hinge', max_iter=16, random_state=1,
                            tol=0.05741570185760213, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f69d47e8460>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f69ac1fd130>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f69ac1fd2e0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=3.1120319146690886e-05, average=True,
                            loss='squared_hinge', max_iter=16, random_state=1,
                            tol=0.05741570185760213, warm_start=True)}]}, 98: {'model_id': 98, 'rank': 4, 'cost': 0.03358016892445192, 'ensemble_weight': 0.16, 'voting_model': VotingClassifier(estimators=None, voting='soft'), 'estimators': [{'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f69871a5610>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f69877691c0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f6987769ac0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.03685558379950674, loss='squared_hinge',
                            max_iter=16, random_state=1,
                            tol=0.0016540929625895179, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f698d1ab3d0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f698d67c1c0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f698d67cd60>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.03685558379950674, loss='squared_hinge',
                            max_iter=16, random_state=1,
                            tol=0.0016540929625895179, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f69ac3b3280>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f6994435a00>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f6994435a30>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.03685558379950674, loss='squared_hinge',
                            max_iter=16, random_state=1,
                            tol=0.0016540929625895179, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f69ac67c6d0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f69a4706bb0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f69a4706fd0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.03685558379950674, loss='squared_hinge',
                            max_iter=16, random_state=1,
                            tol=0.0016540929625895179, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f69a478ef10>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f69a4146a00>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f69a4146040>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.03685558379950674, loss='squared_hinge',
                            max_iter=16, random_state=1,
                            tol=0.0016540929625895179, warm_start=True)}]}}

Biological evaluation:
The model shows poor recall (0.15) for disease detection despite high overall accuracy, indicating it's missing most infections. This is biologically problematic for early detection. The dataset underutilizes key epidemiological factors: spatial patterns (neighbor infections), temporal disease progression, and spectral indicators of physiological stress.

Improve by: 1) Incorporating spatial autoregressive terms using latitude/longitude to capture disease gradients, 2) Adding EVI/CanopyArea temporal derivatives to detect growth anomalies, 3) Including prior year infection counts as strong predictors since disease persistence is common. Focus on features that capture the spatiotemporal dynamics and physiological stress responses characteristic of plant disease epidemiology.

=== Analysis iteration 17 ===

Response from DeepSeek:
Decision: continue
Features: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, longitude, latitude, spatial_lag_redvine_2023, spatial_lag_redvine_2022, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, block_variety, vineSpace, EVI_2024.07.10_CanopyArea_2024.07.10_interaction
Note: Try regression instead of classification since the count nature of the target may be better captured. Use Poisson regression or gradient boosting for count data. Set time limit to 180 seconds. Focus on spatial lags and recent 2024 features before August.
The reason for this modeling suggestion: The persistent poor recall across classification iterations suggests the binary framing may be losing information from the count nature of the target. Regression better captures disease intensity while maintaining the critical spatial and temporal features that showed promise in previous iterations. The simplified feature set focuses on the most predictive elements while reducing overfitting.
ML Agent Coding Attempt 1...
Saved generated code to gen_code/generated_analysis_20250902144656072017.py
Running generated script...
Model trained successfully.

Generated report from ML agent:
 Warning: Missing features: ['spatial_lag_redvine_2023', 'spatial_lag_redvine_2022', 'EVI_delta_2023_to_2024', 'CanopyArea_delta_2023_to_2024', 'EVI_2024.07.10_CanopyArea_2024.07.10_interaction']
Error: No valid data remaining after cleaning.

Biological evaluation:
The result is not biologically meaningful due to missing spatial and temporal features critical for disease epidemiology. The dataset contains rich temporal EVI and canopy data that should capture physiological changes from infection, but derived features weren't properly computed.

Improvements: Calculate spatial lags using longitude/latitude to capture disease aggregation patterns. Compute temporal deltas (2023-2024) to track vegetation decline from infection. Include interaction terms between EVI and canopy metrics. Prioritize features that reflect known epidemiological patterns: spatial aggregation, temporal progression, and host physiological responses. Use block variety and vine spacing as fixed effects for host susceptibility differences.

=== Analysis iteration 18 ===

Response from DeepSeek:
Decision: continue
Features: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, longitude, latitude, EVI_2023.07.30, CanopyArea_2023.07.30, EVI_2022.08.04, CanopyArea_2022.08.04, block_variety, vineSpace
Note: Use regression (Poisson or negative binomial) instead of classification to better capture count nature of target. Compute spatial lag features for redvine counts (k=5 neighbors using latitude/longitude) and temporal deltas (EVI_2024.07.10 - EVI_2023.07.30, CanopyArea_2024.07.10 - CanopyArea_2023.07.30). Set time limit to 300 seconds. Focus on spatial-temporal patterns rather than complex feature engineering.
The reason for this modeling suggestion: The persistent poor recall in classification iterations suggests the binary framing loses important count information. Regression better captures disease intensity while maintaining biological relevance. Spatial lags and temporal deltas are critical for vector-borne disease epidemiology, and the simplified feature set reduces overfitting while focusing on the most predictive elements from 2024 pre-August data.
ML Agent Coding Attempt 1...
Saved generated code to gen_code/generated_analysis_20250902144847232922.py
Running generated script...
Model trained successfully.

Generated report from ML agent:
 Features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'longitude', 'latitude', 'EVI_2023.07.30', 'CanopyArea_2023.07.30', 'EVI_2022.08.04', 'CanopyArea_2022.08.04', 'vineSpace', 'redvine_count_2021_spatial_lag_k5', 'redvine_count_2022_spatial_lag_k5', 'redvine_count_2023_spatial_lag_k5', 'EVI_delta', 'CanopyArea_delta', 'block_variety_MAL', 'block_variety_PS']

Model Evaluation:
Mean Squared Error: 0.0426
Mean Absolute Error: 0.0586
R² Score: 0.0987

Auto-sklearn leaderboard:
          rank  ensemble_weight                 type      cost  duration
model_id                                                                
127          1             0.62  k_nearest_neighbors  0.058377  0.826046
73           2             0.38  k_nearest_neighbors  0.058721  4.092261

Best model description:
{73: {'model_id': 73, 'rank': 1, 'cost': 0.0587207488299532, 'ensemble_weight': 0.38, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f7b60b02d30>, 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f7b603a8cd0>, 'regressor': <autosklearn.pipeline.components.regression.RegressorChoice object at 0x7f7b603a86a0>, 'sklearn_regressor': KNeighborsRegressor(n_neighbors=1, p=1)}, 127: {'model_id': 127, 'rank': 2, 'cost': 0.058377076702050036, 'ensemble_weight': 0.62, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f7b5f662730>, 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f7b5f91cee0>, 'regressor': <autosklearn.pipeline.components.regression.RegressorChoice object at 0x7f7b5f91c160>, 'sklearn_regressor': KNeighborsRegressor(n_neighbors=7, p=1, weights='distance')}}

Biological evaluation:
The model shows poor predictive performance (R²=0.099) despite using relevant features. K-nearest neighbors models with spatial lags suggest spatial dependence, which aligns with known disease gradient patterns. However, the low R² indicates insufficient capture of key epidemiological drivers.

Biologically, virus diseases like red blotch show latency periods (4-12 months) and vector-mediated spread. The model lacks temporal progression features that capture infection dynamics and vector activity periods. Include more time-series EVI/CanopyArea data from critical growth stages and incorporate precipitation/temperature lag variables (3-4 year lag effects documented). Focus on spatial aggregation features that better reflect vector transmission patterns rather than simple spatial lags.

=== Analysis iteration 19 ===

Response from DeepSeek:
Decision: continue
Features: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, longitude, latitude, spatial_lag_redvine_2023, spatial_lag_redvine_2022, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, block_variety, vineSpace
Note: Use classification (redvine_count_2024 > 0) with class weighting. Ensure spatial lag features are computed using k=5 nearest neighbors with Euclidean distance on latitude/longitude. Compute deltas: EVI_delta_2023_to_2024 = EVI_2024.07.10 - EVI_2023.07.30, CanopyArea_delta_2023_to_2024 = CanopyArea_2024.07.10 - CanopyArea_2023.07.30. Set time limit to 300 seconds. Try gradient boosting specifically to capture complex interactions while addressing class imbalance.
The reason for this modeling suggestion: The regression approach in iteration 18 showed poor performance (R²=0.099), indicating classification may be more suitable for this disease detection task. This feature set combines the most biologically relevant elements from previous iterations: historical infection counts, spatial spread patterns, recent spectral changes, and host susceptibility factors. The classification framing with class weighting addresses the severe imbalance while maintaining focus on disease detection. Gradient boosting may better capture the complex interactions in this high-dimensional feature space.
ML Agent Coding Attempt 1...
Saved generated code to gen_code/generated_analysis_20250902145607248224.py
Running generated script...
Model trained successfully.

Generated report from ML agent:
 Features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'longitude', 'latitude', 'vineSpace', 'EVI_delta_2023_to_2024', 'CanopyArea_delta_2023_to_2024', 'block_variety_encoded', 'spatial_lag_redvine_2023', 'spatial_lag_redvine_2022']

AutoSklearn model summary:
auto-sklearn results:
  Dataset name: redvine_classification
  Metric: balanced_accuracy
  Best validation score: 0.898408
  Number of target algorithm runs: 149
  Number of successful target algorithm runs: 65
  Number of crashed target algorithm runs: 46
  Number of target algorithms that exceeded the time limit: 34
  Number of target algorithms that exceeded the memory limit: 4


Classification Report:
              precision    recall  f1-score   support

           0       1.00      0.90      0.95     57493
           1       0.22      0.89      0.35      1805

    accuracy                           0.90     59298
   macro avg       0.61      0.89      0.65     59298
weighted avg       0.97      0.90      0.93     59298


Best model: {7: {'model_id': 7, 'rank': 1, 'cost': 0.17104375346108536, 'ensemble_weight': 0.04, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f6e3169ad30>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f6e31610820>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f6e315e1550>, 'sklearn_classifier': ExtraTreesClassifier(bootstrap=True, criterion='entropy', max_features=2,
                     min_samples_leaf=9, min_samples_split=17, n_estimators=512,
                     n_jobs=1, random_state=1, warm_start=True)}, 11: {'model_id': 11, 'rank': 2, 'cost': 0.22142248451800084, 'ensemble_weight': 0.02, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f6e31721af0>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f6da47866d0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f6d9c37efa0>, 'sklearn_classifier': SGDClassifier(alpha=8.013021928739325e-05, average=True,
              epsilon=0.00034080145245280494, eta0=0.00010669196521726539,
              learning_rate='constant', loss='modified_huber', max_iter=16,
              penalty='l1', random_state=1, tol=0.014504437992696202,
              warm_start=True)}, 16: {'model_id': 16, 'rank': 3, 'cost': 0.10366192478508496, 'ensemble_weight': 0.84, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f6e317143a0>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f6d941d1310>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f6d941d1040>, 'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=3, min_samples_leaf=11,
                     min_samples_split=20, n_estimators=512, n_jobs=1,
                     random_state=1, warm_start=True)}, 34: {'model_id': 34, 'rank': 4, 'cost': 0.33427007448061996, 'ensemble_weight': 0.06, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f6e315dd700>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f6d9c7c8d90>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f6d9c7c8370>, 'sklearn_classifier': BernoulliNB(alpha=11.7223149369688, fit_prior=False)}, 49: {'model_id': 49, 'rank': 5, 'cost': 0.12319777288642098, 'ensemble_weight': 0.04, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f6d8c4cf400>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f6d9450e730>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f6d8673d6d0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=9.007935066110259e-05, loss='squared_hinge',
                            max_iter=16, random_state=1,
                            tol=0.0028781776022860864, warm_start=True)}}

Biological evaluation:
The model shows strong performance (90% accuracy) but has concerning biological limitations. The extremely high recall (89%) for disease detection but low precision (22%) suggests over-prediction of infection, likely due to insufficient incorporation of key epidemiological factors.

The model lacks critical spatial-temporal dynamics: no incorporation of neighborhood infection pressure from previous years, vector transmission patterns, or environmental drivers like temperature/precipitation that influence GRBV spread. The selected EVI and canopy features may not capture the specific physiological changes associated with red blotch virus infection.

Improve by incorporating: 1) spatial autoregressive terms for infection spread, 2) lagged weather variables affecting vector populations, 3) spectral indices specifically sensitive to viral stress (e.g., chlorophyll fluorescence or pigment indices), and 4) vineyard age and management history factors.

=== Analysis iteration 20 ===

Response from DeepSeek:
Decision: continue
Features: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, longitude, latitude, spatial_lag_redvine_2023, spatial_lag_redvine_2022, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, block_variety, vineSpace
Note: Use classification (redvine_count_2024 > 0) with SMOTE for class imbalance. Set time limit to 300 seconds. Try Random Forest specifically to handle spatial-temporal interactions and provide feature importance insights. Ensure spatial lag features are computed using k=5 nearest neighbors with Euclidean distance on latitude/longitude coordinates. Compute deltas: EVI_delta_2023_to_2024 = EVI_2024.07.10 - EVI_2023.07.30, CanopyArea_delta_2023_to_2024 = CanopyArea_2024.07.10 - CanopyArea_2023.07.30.
The reason for this modeling suggestion: The previous iteration showed promising recall (89%) but poor precision (22%), indicating over-prediction of disease. This feature set combines the most biologically relevant elements from successful iterations: historical infection pressure, spatial spread patterns, recent spectral changes, and host susceptibility factors. SMOTE addresses class imbalance more effectively than class weighting, and Random Forest provides robust handling of interactions while offering interpretability through feature importance. The spatial-temporal features capture critical epidemiological patterns for vector-borne disease detection while maintaining computational feasibility.
ML Agent Coding Attempt 1...
Saved generated code to gen_code/generated_analysis_20250902150349929822.py
Running generated script...
Script failed with error:
Traceback (most recent call last):
  File "gen_code/generated_analysis_20250902150349929822.py", line 77, in <module>
    main()
  File "gen_code/generated_analysis_20250902150349929822.py", line 56, in main
    automl = autosklearn.classification.AutoSklearnClassifier(
TypeError: __init__() got an unexpected keyword argument 'include_estimators'

ML Agent Coding Attempt 2...
Saved generated code to gen_code/generated_analysis_20250902150554738049.py
Running generated script...
Script failed with error:
Traceback (most recent call last):
  File "gen_code/generated_analysis_20250902150554738049.py", line 83, in <module>
    main()
  File "gen_code/generated_analysis_20250902150554738049.py", line 62, in main
    automl = autosklearn.classification.AutoSklearnClassifier(
TypeError: __init__() got an unexpected keyword argument 'random_state'

ML Agent Coding Attempt 3...
Saved generated code to gen_code/generated_analysis_20250902150801560182.py
Running generated script...
Model trained successfully.

Generated report from ML agent:
 Features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'longitude', 'latitude', 'block_variety', 'vineSpace', 'EVI_delta_2023_to_2024', 'CanopyArea_delta_2023_to_2024', 'spatial_lag_redvine_2023', 'spatial_lag_redvine_2022']

Classification Report:
              precision    recall  f1-score   support

           0       0.98      0.95      0.97     57493
           1       0.95      0.98      0.97     57493

    accuracy                           0.97    114986
   macro avg       0.97      0.97      0.97    114986
weighted avg       0.97      0.97      0.97    114986


Confusion Matrix:
[[54654  2839]
 [  887 56606]]

Auto-sklearn ensemble score: 0.9675960551719339

Biological evaluation:
The results are biologically meaningful with excellent predictive performance (97% accuracy). The feature selection appropriately incorporates key epidemiological principles: historical infection patterns (redvine_count years), spatial autocorrelation (spatial lag features), host physiological status (EVI and canopy metrics), and cultivar susceptibility (block_variety).

However, the model could be improved by incorporating more explicit temporal dynamics. Consider adding:
- EVI/CanopyArea trends across multiple timepoints (not just deltas)
- Interaction terms between spatial lag features and current physiological metrics
- Environmental covariates (temperature/precipitation data) known to influence disease spread

The high performance suggests sufficient data utilization, but incorporating these additional temporal and environmental dimensions would strengthen biological interpretability and potentially improve robustness for future predictions.

Max iterations reached. Stopping without explicit satisfaction.

=== Experiment history ===
Iteration 1:
Label selected: redvine_count_2024
Features selected: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, Presence_2024.06.04, Presence_2024.07.10, longitude, latitude
Preprocessing note: Handle missing values in 2025 columns (not needed for prediction), ensure consistent date formats, check for spatial autocorrelation. Target appears count-based - consider Poisson regression or classification thresholding.
Reasons for modeling suggestion: Historical redvine counts and girdle presence are strong disease indicators, while 2024 vegetation indices and canopy metrics provide current health status before August. Spatial coordinates may capture environmental patterns. The count nature suggests regression, but class imbalance may require classification if thresholding disease presence.
Mechine Learning modeling result:
Dropping 33934 rows with missing values
Features used for modeling:
1. redvine_count_2021
2. redvine_count_2022
3. redvine_count_2023
4. girdle_presence_2023
5. EVI_2024.06.04
6. EVI_2024.07.10
7. CanopyArea_2024.06.04
8. CanopyArea_2024.07.10
9. Presence_2024.06.04
10. Presence_2024.07.10
11. longitude
12. latitude

Target: redvine_count_2024

Training samples: 210044
Test samples: 52511
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1

=== Evaluation Results ===
Mean Squared Error: 0.0331
Mean Absolute Error: 0.0461
R² Score: 0.5027

=== Model Leaderboard ===
          rank  ensemble_weight                 type      cost  duration
model_id                                                                
125          1              1.0  k_nearest_neighbors  0.516187  1.551119

=== Best Model ===
{125: {'model_id': 125, 'rank': 1, 'cost': 0.5161871348228284, 'ensemble_weight': 1.0, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f649e05e1f0>, 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f64bf180250>, 'regressor': <autosklearn.pipeline.components.regression.RegressorChoice object at 0x7f64bf180790>, 'sklearn_regressor': KNeighborsRegressor(n_neighbors=20, p=1, weights='distance')}}
Biological evaluation:
The model shows moderate predictive performance (R²=0.50) but lacks biological depth. The selected features capture historical disease presence and basic canopy metrics but miss critical epidemiological factors. From the literature, redvine disease (likely GRBV) involves vector-mediated spread (Spissistilus festinus), latency periods, and physiological changes detectable via spectral analysis.

Key improvements needed:
- Incorporate spatial clustering features (distance to infected neighbors)
- Add temporal progression metrics from previous years' EVI/Canopy data
- Include vector population indicators or environmental covariates
- Utilize spectral indices beyond basic EVI that detect pre-symptomatic infection

The current approach underutilizes the available multi-temporal remote sensing data and spatial relationships critical for virus epidemiology.

Iteration 2:
Label selected: redvine_count_2024
Features selected: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, Presence_2024.06.04, Presence_2024.07.10, longitude, latitude, EVI_2023.07.30, CanopyArea_2023.07.30, Presence_2023.07.30, EVI_2022.08.04, CanopyArea_2022.08.04, Presence_2022.08.04
Preprocessing note: Add 2023 summer and 2022 late season vegetation metrics to capture historical health patterns. Consider creating spatial lag features for redvine counts from neighboring vines. Try classification approach with threshold (redvine_count_2024 > 0) as binary target to handle count distribution. Set time limit to 300 seconds.
Reasons for modeling suggestion: The moderate R² (0.50) suggests room for improvement. Adding multi-year vegetation metrics can capture disease progression patterns and pre-symptomatic changes. Spatial lag features would account for disease spread dynamics. The binary classification approach may better handle the zero-inflated count distribution typical of disease incidence data.
Mechine Learning modeling result:
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
Features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'Presence_2024.06.04', 'Presence_2024.07.10', 'longitude', 'latitude', 'EVI_2023.07.30', 'CanopyArea_2023.07.30', 'Presence_2023.07.30', 'EVI_2022.08.04', 'CanopyArea_2022.08.04', 'Presence_2022.08.04']

Classification Report:
              precision    recall  f1-score   support

           0       0.97      1.00      0.98     11691
           1       0.59      0.12      0.20       449

    accuracy                           0.96     12140
   macro avg       0.78      0.56      0.59     12140
weighted avg       0.95      0.96      0.95     12140


Confusion Matrix:
[[11654    37]
 [  395    54]]

Auto-sklearn models:
{3: {'model_id': 3, 'rank': 1, 'cost': 0.03469934102141681, 'ensemble_weight': 0.02, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc85a96c370>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc85aea3910>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc85adadc10>, 'sklearn_classifier': ExtraTreesClassifier(bootstrap=True, max_features=100, min_samples_leaf=2,
                     min_samples_split=9, n_estimators=512, n_jobs=1,
                     random_state=1, warm_start=True)}, 12: {'model_id': 12, 'rank': 2, 'cost': 0.03603789126853374, 'ensemble_weight': 0.58, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc859abcd60>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc83c42f9d0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc83c42f430>, 'sklearn_classifier': AdaBoostClassifier(algorithm='SAMME',
                   base_estimator=DecisionTreeClassifier(max_depth=5),
                   learning_rate=0.9772078202526538, n_estimators=418,
                   random_state=1)}, 17: {'model_id': 17, 'rank': 3, 'cost': 0.035728995057660584, 'ensemble_weight': 0.14, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc85d5e7d90>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc796c70ee0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc796c702e0>, 'sklearn_classifier': AdaBoostClassifier(algorithm='SAMME',
                   base_estimator=DecisionTreeClassifier(max_depth=7),
                   learning_rate=0.4034077156997028, n_estimators=280,
                   random_state=1)}, 30: {'model_id': 30, 'rank': 4, 'cost': 0.03500823723228996, 'ensemble_weight': 0.08, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc859bc1a90>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc7958e27c0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc85a791c40>, 'sklearn_classifier': KNeighborsClassifier(n_neighbors=2)}, 44: {'model_id': 44, 'rank': 5, 'cost': 0.03490527182866554, 'ensemble_weight': 0.06, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc796c69040>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc7958b84c0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc7958b8400>, 'sklearn_classifier': KNeighborsClassifier(n_neighbors=6)}, 68: {'model_id': 68, 'rank': 6, 'cost': 0.034493410214168074, 'ensemble_weight': 0.04, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc85ae22550>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc7971dfca0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc7971df2e0>, 'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=4, n_estimators=512,
                       n_jobs=1, random_state=1, warm_start=True)}, 85: {'model_id': 85, 'rank': 7, 'cost': 0.03542009884678743, 'ensemble_weight': 0.04, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc7b44e9c70>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc7961661f0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc796166fa0>, 'sklearn_classifier': AdaBoostClassifier(algorithm='SAMME',
                   base_estimator=DecisionTreeClassifier(max_depth=7),
                   learning_rate=0.11686061394292119, n_estimators=422,
                   random_state=1)}, 134: {'model_id': 134, 'rank': 8, 'cost': 0.035111202635914385, 'ensemble_weight': 0.02, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc796c828b0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc83c656370>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc859ba4fd0>, 'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=2,
                       min_samples_split=19, n_estimators=512, n_jobs=1,
                       random_state=1, warm_start=True)}, 139: {'model_id': 139, 'rank': 9, 'cost': 0.035111202635914385, 'ensemble_weight': 0.02, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fc85d8f28b0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fc7b40bd760>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fc850200b80>, 'sklearn_classifier': RandomForestClassifier(bootstrap=False, max_features=2, min_samples_leaf=2,
                       min_samples_split=18, n_estimators=512, n_jobs=1,
                       random_state=1, warm_start=True)}}
Biological evaluation:
The model shows poor recall for disease detection (12%), indicating it's missing most infections. This is biologically problematic since redvine disease has spatial and temporal progression patterns not adequately captured. The feature selection includes relevant historical disease counts but misses critical spatial context and temporal patterns in spectral data.

Key improvements needed:
1. Incorporate spatial features (distance to infected neighbors, spatial clustering metrics)
2. Add temporal change features (EVI/CanopyArea deltas between timepoints)
3. Include phenological timing considerations (veraison periods when symptoms manifest)
4. Address class imbalance with appropriate sampling techniques

The current approach underutilizes the available spectral-temporal data and spatial relationships critical for plant disease epidemiology.

Iteration 3:
Label selected: redvine_count_2024
Features selected: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, Presence_2024.06.04, Presence_2024.07.10, longitude, latitude, EVI_2023.07.30, CanopyArea_2023.07.30, Presence_2023.07.30, EVI_2022.08.04, CanopyArea_2022.08.04, Presence_2022.08.04, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, EVI_delta_2022_to_2023, CanopyArea_delta_2022_to_2023
Preprocessing note: Create temporal delta features: EVI_delta_2023_to_2024 = EVI_2024.07.10 - EVI_2023.07.30, CanopyArea_delta_2023_to_2024 = CanopyArea_2024.07.10 - CanopyArea_2023.07.30, EVI_delta_2022_to_2023 = EVI_2023.07.30 - EVI_2022.08.04, CanopyArea_delta_2022_to_2023 = CanopyArea_2023.07.30 - CanopyArea_2022.08.04. These capture year-to-year health changes. Use classification with threshold (redvine_count_2024 > 0) but implement SMOTE for class imbalance. Set time limit to 300 seconds.
Reasons for modeling suggestion: The previous classification approach showed poor recall (12%) due to severe class imbalance. Adding temporal delta features captures disease progression patterns and physiological decline that may precede symptom appearance. SMOTE will help address the class imbalance issue. The classification framing remains appropriate as the biological question is fundamentally about disease presence/absence detection, but requires better handling of the imbalanced data structure.
Mechine Learning modeling result:
Features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'Presence_2024.06.04', 'Presence_2024.07.10', 'longitude', 'latitude', 'EVI_2023.07.30', 'CanopyArea_2023.07.30', 'Presence_2023.07.30', 'EVI_2022.08.04', 'CanopyArea_2022.08.04', 'Presence_2022.08.04', 'EVI_delta_2023_to_2024', 'CanopyArea_delta_2023_to_2024', 'EVI_delta_2022_to_2023', 'CanopyArea_delta_2022_to_2023']

Classification Report:
              precision    recall  f1-score   support

           0       0.97      0.97      0.97     11691
           1       0.30      0.31      0.30       449

    accuracy                           0.95     12140
   macro avg       0.63      0.64      0.64     12140
weighted avg       0.95      0.95      0.95     12140


Auto-sklearn models: {2: {'model_id': 2, 'rank': 1, 'cost': 0.021811183577461812, 'ensemble_weight': 1.0, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f24bfb6fb20>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f24bfb6fbe0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f24bfb6fd00>, 'sklearn_classifier': RandomForestClassifier(max_features=4, n_estimators=512, n_jobs=1,
                       random_state=1, warm_start=True)}}
Biological evaluation:
The model shows strong performance for healthy vines but poor detection of infected vines (F1=0.30), suggesting insufficient biological signal capture. The feature set includes valuable historical disease counts and spatial data, but lacks critical epidemiological factors.

Key improvements needed: Incorporate temporal disease progression patterns (latency periods, secondary spread dynamics), vector presence data (Spissistilus festinus activity), and environmental covariates (temperature, precipitation lag effects). The current spectral features (EVI, canopy area) may not sufficiently capture pre-symptomatic physiological changes associated with GRBV infection.

Focus on features that directly reflect the virus's impact on vine physiology (sugar translocation inhibition, photosynthetic alterations) and spatial aggregation patterns indicative of vector-mediated spread.

Iteration 4:
Label selected: redvine_count_2024
Features selected: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, Presence_2024.06.04, Presence_2024.07.10, longitude, latitude, EVI_2023.07.30, CanopyArea_2023.07.30, Presence_2023.07.30, EVI_2022.08.04, CanopyArea_2022.08.04, Presence_2022.08.04, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, EVI_delta_2022_to_2023, CanopyArea_delta_2022_to_2023, spatial_lag_redvine_2023, spatial_lag_redvine_2022
Preprocessing note: Add spatial lag features for redvine counts (average redvine_count from nearest 5 neighbors using latitude/longitude coordinates). Use classification with threshold (redvine_count_2024 > 0) and implement weighted class balancing instead of SMOTE. Set time limit to 240 seconds. Consider creating interaction terms between spatial lag and temporal delta features.
Reasons for modeling suggestion: The previous iteration showed improved recall (31%) but still insufficient for disease detection. Spatial lag features are biologically critical for vector-borne diseases like GRBV, capturing neighborhood infection pressure and spread patterns. Weighted class balancing may perform better than SMOTE for spatial-temporal data. Interaction terms between spatial and temporal features could capture the combined effect of neighborhood infection pressure and vine health decline.
Mechine Learning modeling result:
Features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'Presence_2024.06.04', 'Presence_2024.07.10', 'longitude', 'latitude', 'EVI_2023.07.30', 'CanopyArea_2023.07.30', 'Presence_2023.07.30', 'EVI_2022.08.04', 'CanopyArea_2022.08.04', 'Presence_2022.08.04', 'spatial_lag_redvine_2023', 'spatial_lag_redvine_2022', 'EVI_delta_2023_to_2024', 'CanopyArea_delta_2023_to_2024', 'EVI_delta_2022_to_2023', 'CanopyArea_delta_2022_to_2023', 'spatial_lag_redvine_2022_EVI_delta_2022_to_2023_interaction', 'spatial_lag_redvine_2022_EVI_delta_2023_to_2024_interaction', 'spatial_lag_redvine_2022_CanopyArea_delta_2022_to_2023_interaction', 'spatial_lag_redvine_2022_CanopyArea_delta_2023_to_2024_interaction', 'spatial_lag_redvine_2023_EVI_delta_2022_to_2023_interaction', 'spatial_lag_redvine_2023_EVI_delta_2023_to_2024_interaction', 'spatial_lag_redvine_2023_CanopyArea_delta_2022_to_2023_interaction', 'spatial_lag_redvine_2023_CanopyArea_delta_2023_to_2024_interaction']
Dataset shape: (296489, 32)
Class distribution: {0: 287463, 1: 9026}
Class weights: {0: 1.0, 1: 31.847389558232933}

=== Model Evaluation ===
              precision    recall  f1-score   support

           0       0.98      0.92      0.95     57493
           1       0.17      0.51      0.25      1805

    accuracy                           0.91     59298
   macro avg       0.57      0.71      0.60     59298
weighted avg       0.96      0.91      0.93     59298


Confusion Matrix:
[[52876  4617]
 [  891   914]]

=== Auto-sklearn Leaderboard ===
          rank  ensemble_weight          type      cost  duration
model_id                                                         
5            1             0.78           qda  0.339613  7.772674
28           2             0.22  bernoulli_nb  0.378345  6.813714

=== Best Model ===
{5: {'model_id': 5, 'rank': 1, 'cost': 0.3396128178569251, 'ensemble_weight': 0.78, 'voting_model': VotingClassifier(estimators=None, voting='soft'), 'estimators': [{'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f886f710760>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f886f51e1f0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f886f51e220>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.9656157556996962)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f886ceca490>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f886cea8c10>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f886cea8d00>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.9656157556996962)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f886cd8c9a0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f886cd091c0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f886cd092b0>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.9656157556996962)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f886cc4ff10>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f886cbc7730>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f886cbc7820>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.9656157556996962)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f886cac14c0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f886ca8aca0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f886ca8ad90>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.9656157556996962)}]}, 28: {'model_id': 28, 'rank': 2, 'cost': 0.3783452396675462, 'ensemble_weight': 0.22, 'voting_model': VotingClassifier(estimators=None, voting='soft'), 'estimators': [{'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f880a0038e0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f886cfb4460>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f886cfb45b0>, 'sklearn_classifier': BernoulliNB(alpha=0.5364480799936838)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f886ccc24f0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f886cc931f0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f886cc932b0>, 'sklearn_classifier': BernoulliNB(alpha=0.5364480799936838)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f886caa6250>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f886c9f84f0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f886c9f85b0>, 'sklearn_classifier': BernoulliNB(alpha=0.5364480799936838)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f8866615280>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f88665cc640>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f88665cc730>, 'sklearn_classifier': BernoulliNB(alpha=0.5364480799936838)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f8866536340>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f88664efb20>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f88664efc10>, 'sklearn_classifier': BernoulliNB(alpha=0.5364480799936838)}]}}
Biological evaluation:
The model shows moderate biological relevance with spatial-temporal features but has poor precision (0.17) for disease detection. The high false positive rate suggests insufficient spectral discrimination of pre-symptomatic infections. 

Biologically, EVI and canopy metrics alone lack specificity for redvine disease detection. Incorporate hyperspectral indices (e.g., flavonol or chlorophyll indices) that better capture physiological stress responses. Prioritize features from veraison period when physiological changes are most pronounced. Consider vector proximity metrics given Spissistilus festinus' role in secondary spread. 

Simplify the feature set by removing redundant spatial interactions and focus on validated spectral biomarkers from vineyard pathology literature.

Iteration 5:
Label selected: redvine_count_2024
Features selected: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, Presence_2024.06.04, Presence_2024.07.10, longitude, latitude, spatial_lag_redvine_2023, spatial_lag_redvine_2022, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, EVI_delta_2022_to_2023, CanopyArea_delta_2022_to_2023, EVI_2024.07.10_CanopyArea_2024.07.10_interaction, EVI_2023.07.30_CanopyArea_2023.07.30_interaction
Preprocessing note: Remove complex spatial interaction terms that may be causing overfitting. Add simpler interaction terms between EVI and CanopyArea for each timepoint to capture combined physiological status. Use classification with threshold (redvine_count_2024 > 0) and implement class weighting. Set time limit to 180 seconds. Consider trying a different algorithm family (e.g., gradient boosting) if available.
Reasons for modeling suggestion: The previous iteration showed improved recall (51%) but poor precision (17%), indicating too many false positives. The complex spatial interaction terms may be overfitting. Simplified EVI-CanopyArea interactions better capture the combined physiological status that might indicate disease stress. Maintaining the spatial lag features is crucial for vector-borne disease spread patterns, while reducing feature complexity may improve model generalization.
Mechine Learning modeling result:
Warning: Feature 'spatial_lag_redvine_2023' not found in dataset
Warning: Feature 'spatial_lag_redvine_2022' not found in dataset
Warning: Feature 'EVI_delta_2023_to_2024' not found in dataset
Warning: Feature 'CanopyArea_delta_2023_to_2024' not found in dataset
Warning: Feature 'EVI_delta_2022_to_2023' not found in dataset
Warning: Feature 'CanopyArea_delta_2022_to_2023' not found in dataset
Features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'Presence_2024.06.04', 'Presence_2024.07.10', 'longitude', 'latitude', 'EVI_CanopyArea_interaction_2024_06', 'EVI_CanopyArea_interaction_2024_07']

Classification Report:
              precision    recall  f1-score   support

           0       0.98      0.98      0.98     50707
           1       0.51      0.57      0.54      1804

    accuracy                           0.97     52511
   macro avg       0.75      0.78      0.76     52511
weighted avg       0.97      0.97      0.97     52511


Auto-sklearn models:
{7: {'model_id': 7, 'rank': 1, 'cost': 0.45370042398784405, 'ensemble_weight': 0.02, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fa3b4ae1a90>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fa3b4fb9370>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fa3b41cab50>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.585497512341966)}, 14: {'model_id': 14, 'rank': 2, 'cost': 0.4401899153123522, 'ensemble_weight': 0.5, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fa3b5b95b50>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fa3b4d3d250>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fa3b43097f0>, 'sklearn_classifier': AdaBoostClassifier(algorithm='SAMME',
                   base_estimator=DecisionTreeClassifier(max_depth=2),
                   learning_rate=1.7653851967971248, n_estimators=290,
                   random_state=1)}, 24: {'model_id': 24, 'rank': 3, 'cost': 0.2707643799440853, 'ensemble_weight': 0.06, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fa3b5101490>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fa3b8dcebb0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fa3b8dce040>, 'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=4, min_samples_leaf=2,
                     min_samples_split=19, n_estimators=512, n_jobs=1,
                     random_state=1, warm_start=True)}, 28: {'model_id': 28, 'rank': 4, 'cost': 0.3174197194948851, 'ensemble_weight': 0.08, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fa4178586d0>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fa3b54a2a00>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fa3b54a2400>, 'sklearn_classifier': DecisionTreeClassifier(class_weight='balanced', criterion='entropy',
                       max_depth=679, min_samples_leaf=15, min_samples_split=10,
                       random_state=1)}, 41: {'model_id': 41, 'rank': 5, 'cost': 0.4626796433128666, 'ensemble_weight': 0.02, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fa3b46906d0>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fa3a83732e0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fa3a83737f0>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.8675367602485742)}, 50: {'model_id': 50, 'rank': 6, 'cost': 0.5059544513323702, 'ensemble_weight': 0.02, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fa3b7509820>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fa3b589d730>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fa417c31fa0>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.3636527602143046)}, 54: {'model_id': 54, 'rank': 7, 'cost': 0.3116249563958049, 'ensemble_weight': 0.06, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fa3b52b0d00>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fa417da73a0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fa3b59b9400>, 'sklearn_classifier': KNeighborsClassifier(n_neighbors=2, p=1, weights='distance')}, 57: {'model_id': 57, 'rank': 8, 'cost': 0.2551130798854788, 'ensemble_weight': 0.12, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fa3b025e730>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fa3b4b833d0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fa3b87c6550>, 'sklearn_classifier': ExtraTreesClassifier(bootstrap=True, max_features=2, min_samples_split=11,
                     n_estimators=512, n_jobs=1, random_state=1,
                     warm_start=True)}, 65: {'model_id': 65, 'rank': 9, 'cost': 0.29963937096395044, 'ensemble_weight': 0.04, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fa417c46ac0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fa3b750b4f0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fa3b61168e0>, 'sklearn_classifier': KNeighborsClassifier(n_neighbors=19, weights='distance')}, 80: {'model_id': 80, 'rank': 10, 'cost': 0.2857760057654313, 'ensemble_weight': 0.04, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fa379f6a190>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fa38816c910>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fa3b485f940>, 'sklearn_classifier': KNeighborsClassifier()}, 87: {'model_id': 87, 'rank': 11, 'cost': 0.320435264838574, 'ensemble_weight': 0.02, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fa379f6a910>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fa3a80df4c0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fa3b426a6a0>, 'sklearn_classifier': KNeighborsClassifier(n_neighbors=67)}, 98: {'model_id': 98, 'rank': 12, 'cost': 0.4626667475865358, 'ensemble_weight': 0.02, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fa380138880>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fa3b0267f70>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fa3b0267fa0>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.8928935753396892)}}
Biological evaluation:
The model shows reasonable performance but has biological limitations. The low F1-score (0.54) for disease detection suggests insufficient capture of epidemiological patterns. Missing spatial lag features indicate inadequate incorporation of dispersal dynamics critical for redvine disease spread. The model relies heavily on recent EVI/canopy data without sufficient historical disease progression context.

Improvements: Incorporate actual spatial lag features using latitude/longitude to model disease gradients. Add temporal disease progression metrics (AUDPC-like features from 2021-2023 counts). Include interaction terms between historical infection status and current vegetation indices, as prior infection significantly influences susceptibility. Focus on features that capture the spatiotemporal epidemic patterns characteristic of vector-borne diseases.

Iteration 6:
Label selected: redvine_count_2024
Features selected: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, Presence_2024.06.04, Presence_2024.07.10, longitude, latitude, EVI_2023.07.30, CanopyArea_2023.07.30, Presence_2023.07.30, EVI_2022.08.04, CanopyArea_2022.08.04, Presence_2022.08.04, spatial_lag_redvine_2023, spatial_lag_redvine_2022, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, EVI_delta_2022_to_2023, CanopyArea_delta_2022_to_2023
Preprocessing note: Re-add spatial lag and delta features that were missing in iteration 5. Use classification (redvine_count_2024 > 0) with class weighting. Set time limit to 300 seconds. Consider creating a cumulative disease pressure feature: weighted_sum_prior_counts = 0.5*redvine_count_2021 + 0.7*redvine_count_2022 + 0.9*redvine_count_2023 to reflect increasing relevance of recent infections.
Reasons for modeling suggestion: The previous iteration showed promising recall (57%) but suffered from missing critical spatial and temporal features. Spatial lag features are biologically essential for vector-borne disease spread patterns, while temporal deltas capture disease progression. The cumulative disease pressure feature reflects the epidemiological reality that recent infections have greater predictive power for future outbreaks. Maintaining classification with weighting addresses the severe class imbalance while focusing on disease detection.
Mechine Learning modeling result:
Warning: Missing features: {'CanopyArea_delta_2023_to_2024', 'spatial_lag_redvine_2023', 'EVI_delta_2023_to_2024', 'CanopyArea_delta_2022_to_2023', 'EVI_delta_2022_to_2023', 'spatial_lag_redvine_2022'}
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
Available features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'Presence_2024.06.04', 'Presence_2024.07.10', 'longitude', 'latitude', 'EVI_2023.07.30', 'CanopyArea_2023.07.30', 'Presence_2023.07.30', 'EVI_2022.08.04', 'CanopyArea_2022.08.04', 'Presence_2022.08.04', 'weighted_sum_prior_counts']

Classification Report:
              precision    recall  f1-score   support

           0       0.98      1.00      0.99     57493
           1       0.73      0.34      0.46      1805

    accuracy                           0.98     59298
   macro avg       0.85      0.67      0.73     59298
weighted avg       0.97      0.98      0.97     59298


Confusion Matrix:
[[57261   232]
 [ 1188   617]]

Leaderboard:
          rank  ensemble_weight           type      cost    duration
model_id                                                            
2            1              1.0  random_forest  0.023584  124.237271
Biological evaluation:
The model shows strong overall accuracy but poor detection of infected vines (recall=0.34), indicating it's primarily identifying healthy vines. The reliance on historical redvine counts creates temporal bias and limits predictive capability for new infections.

Biologically, the model misses key epidemiological factors: spatial patterns of disease spread, vector presence (Spissistilus festinus), and spectral indicators of pre-symptomatic infection. The presence of girdling damage (girdle_presence_2023) is underutilized despite its known association with disease.

Improve by incorporating: spatial autocorrelation metrics, vector population data, and hyperspectral indices from prior years that capture physiological changes before symptom expression. Focus on features that reflect actual infection mechanisms rather than just historical presence counts.

Iteration 7:
Label selected: redvine_count_2024
Features selected: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, Presence_2024.06.04, Presence_2024.07.10, longitude, latitude, EVI_2023.07.30, CanopyArea_2023.07.30, Presence_2023.07.30, EVI_2022.08.04, CanopyArea_2022.08.04, Presence_2022.08.04, spatial_lag_redvine_2023, spatial_lag_redvine_2022, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, EVI_delta_2022_to_2023, CanopyArea_delta_2022_to_2023, weighted_sum_prior_counts, spatial_lag_weighted_sum
Preprocessing note: Ensure spatial lag features are properly computed using latitude/longitude coordinates (average of nearest 5 neighbors). Create EVI_delta_2023_to_2024 = EVI_2024.07.10 - EVI_2023.07.30, CanopyArea_delta_2023_to_2024 = CanopyArea_2024.07.10 - CanopyArea_2023.07.30, EVI_delta_2022_to_2023 = EVI_2023.07.30 - EVI_2022.08.04, CanopyArea_delta_2022_to_2023 = CanopyArea_2023.07.30 - CanopyArea_2022.08.04. Use classification (redvine_count_2024 > 0) with class weighting. Set time limit to 300 seconds. Add spatial_lag_weighted_sum as spatial average of weighted_sum_prior_counts from neighbors.
Reasons for modeling suggestion: The previous iteration showed poor recall (34%) for disease detection despite good overall accuracy. The missing spatial lag and delta features are critical for capturing vector-borne disease spread patterns and temporal progression. The weighted_sum_prior_counts reflects epidemiological relevance of recent infections, and adding its spatial lag captures neighborhood disease pressure. These features address the biological mechanisms of redvine disease spread while maintaining computational feasibility.
Mechine Learning modeling result:
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
Features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'longitude', 'latitude', 'EVI_2023.07.30', 'CanopyArea_2023.07.30', 'EVI_2022.08.04', 'CanopyArea_2022.08.04', 'EVI_delta_2023_to_2024', 'CanopyArea_delta_2023_to_2024', 'EVI_delta_2022_to_2023', 'CanopyArea_delta_2022_to_2023', 'weighted_sum_prior_counts', 'spatial_lag_redvine_2023', 'spatial_lag_redvine_2022', 'spatial_lag_weighted_sum']

Classification Report:
              precision    recall  f1-score   support

           0       0.98      1.00      0.99     57493
           1       0.73      0.34      0.47      1805

    accuracy                           0.98     59298
   macro avg       0.86      0.67      0.73     59298
weighted avg       0.97      0.98      0.97     59298


Confusion Matrix:
[[57267   226]
 [ 1184   621]]

Auto-sklearn leaderboard:
          rank  ensemble_weight type      cost    duration
model_id                                                  
49           1              1.0  mlp  0.023814  143.334334
Biological evaluation:
The model shows strong overall accuracy but poor recall for disease detection (34%), indicating it misses many infected vines. This is biologically problematic since epidemiological principles show disease spread depends on spatial proximity and historical patterns. The feature set appropriately includes spatial lags and temporal deltas, but may lack key epidemiological variables like vector presence data or more granular temporal resolution during critical infection periods.

Improvements: Incorporate vector population data (Spissistilus festinus presence/activity) and precipitation/temperature variables with appropriate time lags (3-4 year lag for precipitation effects). Focus on spectral indices beyond EVI that better capture physiological stress responses specific to red blotch virus infection.

Iteration 8:
Label selected: redvine_count_2024
Features selected: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, longitude, latitude, spatial_lag_redvine_2023, spatial_lag_redvine_2022, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, EVI_delta_2022_to_2023, CanopyArea_delta_2022_to_2023, weighted_sum_prior_counts, spatial_lag_weighted_sum, EVI_2024.07.10_CanopyArea_2024.07.10_interaction, EVI_2023.07.30_CanopyArea_2023.07.30_interaction
Preprocessing note: Add interaction terms between EVI and CanopyArea for 2024.07 and 2023.07 timepoints to capture combined physiological stress indicators. Use classification (redvine_count_2024 > 0) with class weighting. Set time limit to 240 seconds. Consider trying gradient boosting algorithms if available, as they may better capture complex interactions.
Reasons for modeling suggestion: The model shows persistent poor recall (34%) despite incorporating spatial and temporal features. Adding EVI-CanopyArea interaction terms may better capture the combined physiological stress response to infection. The classification framing remains appropriate given the binary nature of disease detection, and class weighting addresses the imbalance. The 240-second time limit balances exploration with efficiency.
Mechine Learning modeling result:
Features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'longitude', 'latitude', 'EVI_2024.07.10_CanopyArea_2024.07.10_interaction', 'EVI_2023.07.30_CanopyArea_2023.07.30_interaction']
Training samples: 237191, Test samples: 59298
Class distribution - Train: [229970   7221], Test: [57493  1805]

Classification Report:
              precision    recall  f1-score   support

           0       0.98      0.99      0.99     57493
           1       0.60      0.48      0.53      1805

    accuracy                           0.97     59298
   macro avg       0.79      0.73      0.76     59298
weighted avg       0.97      0.97      0.97     59298


Final ensemble:
{36: {'model_id': 36, 'rank': 1, 'cost': 0.506707710827387, 'ensemble_weight': 0.46, 'voting_model': VotingClassifier(estimators=None, voting='soft'), 'estimators': [{'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb7b06c5ca0>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb7dc0bf2e0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb7dc0bfdf0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.001960435544762734, average=True, max_iter=16,
                            random_state=1, tol=0.046231160255636165,
                            warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb7e7b41a60>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb7a85c7fd0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb7a85c7040>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.001960435544762734, average=True, max_iter=16,
                            random_state=1, tol=0.046231160255636165,
                            warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb7dc36c1c0>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb7e78ac490>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb7e78ac100>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.001960435544762734, average=True, max_iter=16,
                            random_state=1, tol=0.046231160255636165,
                            warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb7dc7d0a60>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb7dc129610>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb7dc1296a0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.001960435544762734, average=True, max_iter=16,
                            random_state=1, tol=0.046231160255636165,
                            warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb7b01963a0>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb7dc336640>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb7dc3367f0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.001960435544762734, average=True, max_iter=16,
                            random_state=1, tol=0.046231160255636165,
                            warm_start=True)}]}, 56: {'model_id': 56, 'rank': 2, 'cost': 0.44812538193530194, 'ensemble_weight': 0.06, 'voting_model': VotingClassifier(estimators=None, voting='soft'), 'estimators': [{'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb7b049eca0>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb7a1f489a0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb7a1f488b0>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.2526327000902143)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb7d7f00880>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb7a0b9d070>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb7a0b9dcd0>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.2526327000902143)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb7b875af70>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb7a82b2e80>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb7a82b25b0>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.2526327000902143)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb7b0629d00>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb7e78e9550>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb7e78e97f0>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.2526327000902143)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb7b8785460>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb851245ee0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb851245d90>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.2526327000902143)}]}, 58: {'model_id': 58, 'rank': 3, 'cost': 0.25696589187043717, 'ensemble_weight': 0.48, 'voting_model': VotingClassifier(estimators=None, voting='soft'), 'estimators': [{'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb7d7a957c0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb7a1085490>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb7a10853d0>, 'sklearn_classifier': DecisionTreeClassifier(criterion='entropy', max_depth=12, min_samples_leaf=19,
                       min_samples_split=8, random_state=1)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb851476f70>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb85125e460>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb85125e550>, 'sklearn_classifier': DecisionTreeClassifier(criterion='entropy', max_depth=12, min_samples_leaf=19,
                       min_samples_split=8, random_state=1)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb7e44e66d0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb8516fb790>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb7dc342520>, 'sklearn_classifier': DecisionTreeClassifier(criterion='entropy', max_depth=12, min_samples_leaf=19,
                       min_samples_split=8, random_state=1)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb8514881f0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb8514e4fa0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb8514e4a90>, 'sklearn_classifier': DecisionTreeClassifier(criterion='entropy', max_depth=12, min_samples_leaf=19,
                       min_samples_split=8, random_state=1)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb8515203d0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb851507910>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb851507700>, 'sklearn_classifier': DecisionTreeClassifier(criterion='entropy', max_depth=12, min_samples_leaf=19,
                       min_samples_split=8, random_state=1)}]}}
Biological evaluation:
The model shows strong overall accuracy but poor performance for disease detection (F1=0.53), indicating limited biological relevance. The features lack critical epidemiological predictors: spatial spread patterns, vector presence (Spissistilus festinus), and temporal disease progression dynamics. EVI and canopy area alone cannot reliably distinguish disease-induced stress from other factors.

Improve by incorporating: 1) spatial autocorrelation metrics from neighboring vines, 2) vector population data, 3) multi-year symptom progression patterns, and 4) spectral indices specifically sensitive to viral infection (e.g., chlorophyll fluorescence). Focus on features that capture the secondary spread dynamics characteristic of GRBV epidemiology.

Iteration 9:
Label selected: redvine_count_2024
Features selected: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, longitude, latitude, spatial_lag_redvine_2023, spatial_lag_redvine_2022, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, EVI_delta_2022_to_2023, CanopyArea_delta_2022_to_2023, weighted_sum_prior_counts, spatial_lag_weighted_sum, EVI_2024.07.10_CanopyArea_2024.07.10_interaction, EVI_2023.07.30_CanopyArea_2023.07.30_interaction, block_variety, vineSpace
Preprocessing note: Add block_variety and vineSpace as potential susceptibility factors. Ensure spatial lag features are properly computed using k-nearest neighbors (k=5) with latitude/longitude coordinates. Use classification (redvine_count_2024 > 0) with class weighting. Set time limit to 300 seconds. Try gradient boosting algorithms specifically if available.
Reasons for modeling suggestion: The persistent poor recall (34-48%) indicates missing critical epidemiological factors. Block variety may affect susceptibility to redvine disease, and vine spacing influences microclimate conditions favorable for vector spread. These biological factors combined with the existing spatial-temporal features may better capture the complex disease dynamics while maintaining computational feasibility within the time constraints.
Mechine Learning modeling result:
Warning: Missing features: ['spatial_lag_redvine_2023', 'spatial_lag_redvine_2022', 'EVI_delta_2023_to_2024', 'CanopyArea_delta_2023_to_2024', 'EVI_delta_2022_to_2023', 'CanopyArea_delta_2022_to_2023', 'weighted_sum_prior_counts', 'spatial_lag_weighted_sum', 'EVI_2024.07.10_CanopyArea_2024.07.10_interaction', 'EVI_2023.07.30_CanopyArea_2023.07.30_interaction']
Class distribution:
target_binary
0    287463
1      9026
Name: count, dtype: int64

Training set size: 237191
Test set size: 59298
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1

=== Model Evaluation ===

Classification Report:
              precision    recall  f1-score   support

           0       0.98      1.00      0.99     57493
           1       0.59      0.20      0.30      1805

    accuracy                           0.97     59298
   macro avg       0.78      0.60      0.64     59298
weighted avg       0.96      0.97      0.96     59298


Confusion Matrix:
[[57237   256]
 [ 1436   369]]

=== Model Details ===
auto-sklearn results:
  Dataset name: ad4f5969-8823-11f0-8c19-2704aa562b65
  Metric: accuracy
  Best validation score: 0.970594
  Number of target algorithm runs: 25
  Number of successful target algorithm runs: 14
  Number of crashed target algorithm runs: 4
  Number of target algorithms that exceeded the time limit: 6
  Number of target algorithms that exceeded the memory limit: 1


Best model:
{16: {'model_id': 16, 'rank': 1, 'cost': 0.02940618478467083, 'ensemble_weight': 1.0, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fbe9ee9b400>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fbe9ecd0f70>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fbe9ecd0730>, 'sklearn_classifier': KNeighborsClassifier(n_neighbors=4, p=1)}}

Features used:
1. redvine_count_2021
2. redvine_count_2022
3. redvine_count_2023
4. girdle_presence_2023
5. EVI_2024.06.04
6. EVI_2024.07.10
7. CanopyArea_2024.06.04
8. CanopyArea_2024.07.10
9. longitude
10. latitude
11. vineSpace
12. block_variety_encoded
Biological evaluation:
The model shows poor recall for disease detection (20%), indicating it misses most infections. While using historical counts and spatial data is epidemiologically sound, the missing engineered features suggest incomplete feature utilization.

Biologically, grapevine viruses like GRBV show spectral changes before symptoms. The model should incorporate:
- EVI/CanopyArea temporal deltas (2023-2024) to capture growth anomalies
- Spatial lags to account for vector-mediated spread patterns
- Hyperspectral indices beyond EVI (e.g., chlorophyll-sensitive indices)
- Vector pressure indicators from surrounding vines

The current approach underutilizes known epidemiological drivers of virus spread. Focus on pre-symptomatic physiological changes and spatial patterns for earlier detection.

Iteration 10:
Label selected: redvine_count_2024
Features selected: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, longitude, latitude, EVI_2023.07.30, CanopyArea_2023.07.30, EVI_2022.08.04, CanopyArea_2022.08.04, spatial_lag_redvine_2023, spatial_lag_redvine_2022, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, EVI_delta_2022_to_2023, CanopyArea_delta_2022_to_2023, weighted_sum_prior_counts, spatial_lag_weighted_sum, block_variety, vineSpace
Preprocessing note: Ensure spatial lag features are properly computed using k-nearest neighbors (k=5) with latitude/longitude. Compute deltas: EVI_delta_2023_to_2024 = EVI_2024.07.10 - EVI_2023.07.30, CanopyArea_delta_2023_to_2024 = CanopyArea_2024.07.10 - CanopyArea_2023.07.30, EVI_delta_2022_to_2023 = EVI_2023.07.30 - EVI_2022.08.04, CanopyArea_delta_2022_to_2023 = CanopyArea_2023.07.30 - CanopyArea_2022.08.04. Use classification (redvine_count_2024 > 0) with class weighting. Set time limit to 300 seconds. Try gradient boosting algorithms specifically.
Reasons for modeling suggestion: The persistent poor recall (20-48%) indicates missing critical epidemiological factors. Spatial lag features and temporal deltas are essential for capturing vector-borne disease spread patterns and physiological progression. Block variety and vine spacing may affect susceptibility and microclimate conditions. These features combined address the complex disease dynamics while maintaining computational feasibility. Gradient boosting may better capture the complex interactions in this high-dimensional feature space.
Mechine Learning modeling result:
Features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'longitude', 'latitude', 'EVI_2023.07.30', 'CanopyArea_2023.07.30', 'EVI_2022.08.04', 'CanopyArea_2022.08.04', 'spatial_lag_redvine_2023', 'spatial_lag_redvine_2022', 'EVI_delta_2023_to_2024', 'CanopyArea_delta_2023_to_2024', 'EVI_delta_2022_to_2023', 'CanopyArea_delta_2022_to_2023', 'weighted_sum_prior_counts', 'spatial_lag_weighted_sum', 'block_variety', 'vineSpace']

Classification Report:
              precision    recall  f1-score   support

           0       0.98      1.00      0.99     57493
           1       0.73      0.34      0.47      1805

    accuracy                           0.98     59298
   macro avg       0.86      0.67      0.73     59298
weighted avg       0.97      0.98      0.97     59298


Auto-sklearn models: {7: {'model_id': 7, 'rank': 1, 'cost': 0.02562792242634848, 'ensemble_weight': 0.02, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2442def670>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2442b3f6d0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2442b3fc40>, 'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=1,
                       min_samples_leaf=14, min_samples_split=12,
                       n_estimators=512, n_jobs=1, random_state=1,
                       warm_start=True)}, 11: {'model_id': 11, 'rank': 2, 'cost': 0.025167999591179657, 'ensemble_weight': 0.02, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f24410af280>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2441619a00>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2443106e80>, 'sklearn_classifier': MLPClassifier(activation='tanh', alpha=0.0288316953521873, beta_1=0.999,
              beta_2=0.9, hidden_layer_sizes=(91,),
              learning_rate_init=0.0002309951929622804, max_iter=128,
              n_iter_no_change=32, random_state=1, validation_fraction=0.0,
              verbose=0, warm_start=True)}, 13: {'model_id': 13, 'rank': 3, 'cost': 0.02481028183049283, 'ensemble_weight': 0.04, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f244211de50>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2445b99ee0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2441ff9d30>, 'sklearn_classifier': MLPClassifier(activation='tanh', alpha=0.004046109807229298, beta_1=0.999,
              beta_2=0.9, hidden_layer_sizes=(17, 17, 17),
              learning_rate_init=0.00010292125690429162, max_iter=128,
              n_iter_no_change=32, random_state=1, validation_fraction=0.0,
              verbose=0, warm_start=True)}, 21: {'model_id': 21, 'rank': 4, 'cost': 0.023417737690676343, 'ensemble_weight': 0.1, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f244141e5b0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f24b4692520>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f24b4692220>, 'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=7, min_samples_split=3,
                     n_estimators=512, n_jobs=1, random_state=1,
                     warm_start=True)}, 60: {'model_id': 60, 'rank': 5, 'cost': 0.028144722385466392, 'ensemble_weight': 0.1, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2442fbac40>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f23f241b520>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2442563370>, 'sklearn_classifier': DecisionTreeClassifier(max_depth=22, min_samples_leaf=7, min_samples_split=9,
                       random_state=1)}, 66: {'model_id': 66, 'rank': 6, 'cost': 0.02670107570840896, 'ensemble_weight': 0.04, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f24203a6b50>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f24b46f5fd0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2440321c70>, 'sklearn_classifier': DecisionTreeClassifier(max_depth=22, min_samples_leaf=20, min_samples_split=16,
                       random_state=1)}, 85: {'model_id': 85, 'rank': 7, 'cost': 0.024695301121700708, 'ensemble_weight': 0.32, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2438171100>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f23f2551460>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2442ef2820>, 'sklearn_classifier': AdaBoostClassifier(algorithm='SAMME',
                   base_estimator=DecisionTreeClassifier(max_depth=6),
                   learning_rate=0.10946770404121296, n_estimators=60,
                   random_state=1)}, 86: {'model_id': 86, 'rank': 8, 'cost': 0.023749904182742698, 'ensemble_weight': 0.04, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f244135cd30>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f24b468ca00>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f24b468c730>, 'sklearn_classifier': ExtraTreesClassifier(max_features=7, min_samples_leaf=12, min_samples_split=9,
                     n_estimators=512, n_jobs=1, random_state=1,
                     warm_start=True)}, 87: {'model_id': 87, 'rank': 9, 'cost': 0.025576819889107538, 'ensemble_weight': 0.04, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f23f010bd60>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f23f39cef70>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f23f3a0f040>, 'sklearn_classifier': ExtraTreesClassifier(bootstrap=True, criterion='entropy', max_features=3,
                     min_samples_leaf=2, min_samples_split=14, n_estimators=512,
                     n_jobs=1, random_state=1, warm_start=True)}, 94: {'model_id': 94, 'rank': 10, 'cost': 0.026509441193755312, 'ensemble_weight': 0.04, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f23f084e310>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f23f143b6d0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f23f143b730>, 'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=3, n_estimators=512,
                     n_jobs=1, random_state=1, warm_start=True)}, 101: {'model_id': 101, 'rank': 11, 'cost': 0.02657331936530649, 'ensemble_weight': 0.1, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f23f0935a30>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f23f27d55e0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f23f27dd490>, 'sklearn_classifier': DecisionTreeClassifier(criterion='entropy', max_depth=19, min_samples_leaf=12,
                       min_samples_split=15, random_state=1)}, 120: {'model_id': 120, 'rank': 12, 'cost': 0.02399264123463729, 'ensemble_weight': 0.14, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f23f39d57f0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f240030dca0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2441873910>, 'sklearn_classifier': ExtraTreesClassifier(bootstrap=True, max_features=6, min_samples_leaf=14,
                     min_samples_split=14, n_estimators=512, n_jobs=1,
                     random_state=1, warm_start=True)}}
Biological evaluation:
The model shows poor recall (0.34) for disease detection despite good overall accuracy, indicating it's missing many true infections. The feature set is overly complex with redundant temporal and spatial lag features that may not capture key biological signals.

Biologically, redvine disease (likely GRBV) has known spectral signatures in EVI/CanopyArea that manifest before visual symptoms. Focus on the most predictive 2024 pre-August features (EVI and CanopyArea from June/July) combined with prior infection history and spatial proximity to known infections. Simplify to core epidemiological drivers: recent spectral changes, infection history, and spatial context.

Reduce feature complexity and prioritize features that directly reflect physiological changes from viral infection and spatial spread patterns.

Iteration 11:
Label selected: redvine_count_2024
Features selected: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, longitude, latitude, spatial_lag_redvine_2023, spatial_lag_redvine_2022, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, block_variety
Preprocessing note: Simplify feature set to core epidemiological drivers. Focus on 2024 pre-August spectral data (June/July EVI and CanopyArea), historical infection counts, spatial lags (k=5 neighbors), and 2023-2024 deltas. Use classification (redvine_count_2024 > 0) with class weighting. Set time limit to 240 seconds. Try gradient boosting specifically to capture complex interactions while maintaining interpretability.
Reasons for modeling suggestion: Previous iterations show persistent poor recall (34%) despite complex feature sets. The simplified approach focuses on the most biologically relevant features: recent spectral changes (2024 data before August), historical infection pressure, spatial spread patterns, and cultivar susceptibility. This reduces overfitting while maintaining critical epidemiological drivers for GRBV detection.
Mechine Learning modeling result:
Features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'longitude', 'latitude', 'EVI_delta_2023_to_2024', 'CanopyArea_delta_2023_to_2024', 'spatial_lag_redvine_2023', 'spatial_lag_redvine_2022', 'block_variety_encoded']

Classification Report:
              precision    recall  f1-score   support

           0       0.99      0.86      0.92     41294
           1       0.14      0.65      0.23      1474

    accuracy                           0.85     42768
   macro avg       0.56      0.76      0.58     42768
weighted avg       0.96      0.85      0.89     42768


Confusion Matrix:
[[35463  5831]
 [  509   965]]

Auto-sklearn models:
{5: {'model_id': 5, 'rank': 1, 'cost': 0.3741146289499544, 'ensemble_weight': 0.1, 'voting_model': VotingClassifier(estimators=None, voting='soft'), 'estimators': [{'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2d839f1760>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cdeced5b0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cdcbf9460>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.9656157556996962)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2d1d40a850>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cec6da3a0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cec6da910>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.9656157556996962)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2d1a5890a0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cf4072d90>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cf4072970>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.9656157556996962)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cec6ce610>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cf41b0ca0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cf41b0be0>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.9656157556996962)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2d839abe20>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2ce4402fa0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2ce44020a0>, 'sklearn_classifier': QuadraticDiscriminantAnalysis(reg_param=0.9656157556996962)}]}, 28: {'model_id': 28, 'rank': 2, 'cost': 0.4506903092941577, 'ensemble_weight': 0.04, 'voting_model': VotingClassifier(estimators=None, voting='soft'), 'estimators': [{'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cd762d880>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cf4048e80>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cf4048430>, 'sklearn_classifier': SGDClassifier(alpha=7.314043281217936e-06, eta0=0.0026470891518782036,
              l1_ratio=0.7454137881296051, learning_rate='invscaling',
              max_iter=256, penalty='elasticnet', power_t=0.9722767658247132,
              random_state=1, tol=4.22266504248996e-05, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cddbee190>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2d1a038160>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2d1a038430>, 'sklearn_classifier': SGDClassifier(alpha=7.314043281217936e-06, eta0=0.0026470891518782036,
              l1_ratio=0.7454137881296051, learning_rate='invscaling',
              max_iter=256, penalty='elasticnet', power_t=0.9722767658247132,
              random_state=1, tol=4.22266504248996e-05, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cec6fa220>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2d1068a790>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cf41ab040>, 'sklearn_classifier': SGDClassifier(alpha=7.314043281217936e-06, eta0=0.0026470891518782036,
              l1_ratio=0.7454137881296051, learning_rate='invscaling',
              max_iter=256, penalty='elasticnet', power_t=0.9722767658247132,
              random_state=1, tol=4.22266504248996e-05, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cd7de47f0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cfc61b730>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cfc61b970>, 'sklearn_classifier': SGDClassifier(alpha=7.314043281217936e-06, eta0=0.0026470891518782036,
              l1_ratio=0.7454137881296051, learning_rate='invscaling',
              max_iter=256, penalty='elasticnet', power_t=0.9722767658247132,
              random_state=1, tol=4.22266504248996e-05, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cfc675430>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2d1073e640>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2d1073e610>, 'sklearn_classifier': SGDClassifier(alpha=7.314043281217936e-06, eta0=0.0026470891518782036,
              l1_ratio=0.7454137881296051, learning_rate='invscaling',
              max_iter=256, penalty='elasticnet', power_t=0.9722767658247132,
              random_state=1, tol=4.22266504248996e-05, warm_start=True)}]}, 34: {'model_id': 34, 'rank': 3, 'cost': 0.25654079139887875, 'ensemble_weight': 0.16, 'voting_model': VotingClassifier(estimators=None, voting='soft'), 'estimators': [{'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2d19212af0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cd7de4940>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cdc21e910>, 'sklearn_classifier': GaussianNB()}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cdde3b3a0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2d101f0a00>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2d101f08e0>, 'sklearn_classifier': GaussianNB()}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cdf55d970>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cdf547520>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cdf547b20>, 'sklearn_classifier': GaussianNB()}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cec040d30>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cf42e6880>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cf42e6430>, 'sklearn_classifier': GaussianNB()}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2d1ad923a0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cf4062130>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cf4062490>, 'sklearn_classifier': GaussianNB()}]}, 41: {'model_id': 41, 'rank': 4, 'cost': 0.3288878532668624, 'ensemble_weight': 0.14, 'voting_model': VotingClassifier(estimators=None, voting='soft'), 'estimators': [{'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cd735a340>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cdc89f370>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cdcdd56d0>, 'sklearn_classifier': DecisionTreeClassifier(class_weight='balanced', max_depth=1,
                       min_samples_leaf=14, min_samples_split=16,
                       random_state=1)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cdf547c40>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2d106a0b80>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2d106a0640>, 'sklearn_classifier': DecisionTreeClassifier(class_weight='balanced', max_depth=1,
                       min_samples_leaf=14, min_samples_split=16,
                       random_state=1)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cec381520>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cec6da130>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cec6da310>, 'sklearn_classifier': DecisionTreeClassifier(class_weight='balanced', max_depth=1,
                       min_samples_leaf=14, min_samples_split=16,
                       random_state=1)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2d104df8b0>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2d105fce20>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2d1a076d30>, 'sklearn_classifier': DecisionTreeClassifier(class_weight='balanced', max_depth=1,
                       min_samples_leaf=14, min_samples_split=16,
                       random_state=1)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cfc6e3b80>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2d837bdd30>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2d837bdd00>, 'sklearn_classifier': DecisionTreeClassifier(class_weight='balanced', max_depth=1,
                       min_samples_leaf=14, min_samples_split=16,
                       random_state=1)}]}, 44: {'model_id': 44, 'rank': 5, 'cost': 0.3334336763440272, 'ensemble_weight': 0.44, 'voting_model': VotingClassifier(estimators=None, voting='soft'), 'estimators': [{'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cd76aa190>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cdd437ca0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cdd437550>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.00018928266410163868, average=True,
                            loss='squared_hinge', max_iter=16, random_state=1,
                            tol=0.008177434956213786, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cf4073d30>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cf41b4370>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cf41b4430>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.00018928266410163868, average=True,
                            loss='squared_hinge', max_iter=16, random_state=1,
                            tol=0.008177434956213786, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2d19782970>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2d1ace67f0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2d1ace6bb0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.00018928266410163868, average=True,
                            loss='squared_hinge', max_iter=16, random_state=1,
                            tol=0.008177434956213786, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2d18fcd610>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2d836e9460>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2d836e9a90>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.00018928266410163868, average=True,
                            loss='squared_hinge', max_iter=16, random_state=1,
                            tol=0.008177434956213786, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cfc4c7a30>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cfc5fb400>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cfc61b790>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.00018928266410163868, average=True,
                            loss='squared_hinge', max_iter=16, random_state=1,
                            tol=0.008177434956213786, warm_start=True)}]}, 51: {'model_id': 51, 'rank': 6, 'cost': 0.35025979571997745, 'ensemble_weight': 0.06, 'voting_model': VotingClassifier(estimators=None, voting='soft'), 'estimators': [{'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cdc673040>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cddd3adc0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cddd3acd0>, 'sklearn_classifier': DecisionTreeClassifier(criterion='entropy', max_depth=15, min_samples_split=11,
                       random_state=1)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2d1042e880>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2d102c93d0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2d102c96a0>, 'sklearn_classifier': DecisionTreeClassifier(criterion='entropy', max_depth=15, min_samples_split=11,
                       random_state=1)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2d8380ed60>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cfc55f550>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cfc55feb0>, 'sklearn_classifier': DecisionTreeClassifier(criterion='entropy', max_depth=15, min_samples_split=11,
                       random_state=1)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cdcbfca90>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cfc675100>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cfc675370>, 'sklearn_classifier': DecisionTreeClassifier(criterion='entropy', max_depth=15, min_samples_split=11,
                       random_state=1)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2d106cc730>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cf408c400>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cf408c550>, 'sklearn_classifier': DecisionTreeClassifier(criterion='entropy', max_depth=15, min_samples_split=11,
                       random_state=1)}]}, 54: {'model_id': 54, 'rank': 7, 'cost': 0.25655592695290064, 'ensemble_weight': 0.06, 'voting_model': VotingClassifier(estimators=None, voting='soft'), 'estimators': [{'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cdcb87eb0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cdf1b7d30>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cdf1b7bb0>, 'sklearn_classifier': GaussianNB()}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cfc5fb520>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2d83815610>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2d83815a00>, 'sklearn_classifier': GaussianNB()}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2d19da6100>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2cdc26f820>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2cdc26f7f0>, 'sklearn_classifier': GaussianNB()}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2cddebd5b0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2d1d5244f0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2d1d524460>, 'sklearn_classifier': GaussianNB()}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f2d18b7f3d0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f2d1a748970>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f2d1a748fd0>, 'sklearn_classifier': GaussianNB()}]}}

Auto-sklearn leaderboard:
          rank  ensemble_weight                type      cost   duration
model_id                                                                
34           1             0.16         gaussian_nb  0.256541   9.911626
54           2             0.06         gaussian_nb  0.256556   9.811985
41           3             0.14       decision_tree  0.328888  16.362670
44           4             0.44  passive_aggressive  0.333434  10.028356
51           5             0.06       decision_tree  0.350260  14.846099
5            6             0.10                 qda  0.374115   9.241405
28           7             0.04                 sgd  0.450690  28.362978
Biological evaluation:
The model shows poor performance for disease detection (precision 0.14, recall 0.65), indicating limited biological relevance. The features used lack critical epidemiological predictors: spatial context (neighbor infection status), temporal disease progression patterns, and spectral indicators of physiological stress.

Key improvements needed:
- Incorporate spatial autocorrelation metrics from neighboring vines
- Add temporal features showing disease progression patterns
- Include spectral vegetation indices sensitive to plant stress
- Account for vector transmission patterns and environmental factors
- Address class imbalance with appropriate sampling techniques

The current feature set misses fundamental epidemiological drivers of red blotch virus spread, particularly the spatial aggregation patterns and physiological changes that precede symptom expression.

Iteration 12:
Label selected: redvine_count_2024
Features selected: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, longitude, latitude, spatial_lag_redvine_2023, spatial_lag_redvine_2022, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, block_variety, vineSpace, EVI_2024.07.10_CanopyArea_2024.07.10_interaction, EVI_2023.07.30_CanopyArea_2023.07.30_interaction
Preprocessing note: Focus on classification (redvine_count_2024 > 0) with class weighting. Ensure spatial lag features are properly computed using k=5 nearest neighbors with latitude/longitude. Compute deltas: EVI_delta_2023_to_2024 = EVI_2024.07.10 - EVI_2023.07.30, CanopyArea_delta_2023_to_2024 = CanopyArea_2024.07.10 - CanopyArea_2023.07.30. Set time limit to 300 seconds. Try gradient boosting specifically to capture complex interactions while maintaining interpretability.
Reasons for modeling suggestion: The persistent poor recall (34-65%) across iterations indicates missing critical epidemiological factors. This simplified yet comprehensive feature set combines the most biologically relevant elements: recent spectral changes (2024 data before August), historical infection pressure, spatial spread patterns, cultivar susceptibility, and vine spacing effects. The classification framing remains appropriate for disease detection, and gradient boosting may better capture the complex interactions in this high-dimensional feature space while addressing the severe class imbalance.
Mechine Learning modeling result:
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
Features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'longitude', 'latitude', 'spatial_lag_redvine_2023', 'spatial_lag_redvine_2022', 'EVI_delta_2023_to_2024', 'CanopyArea_delta_2023_to_2024', 'vineSpace', 'EVI_2024.07.10_CanopyArea_2024.07.10_interaction', 'EVI_2023.07.30_CanopyArea_2023.07.30_interaction', 'block_variety_encoded']

Classification Report:
              precision    recall  f1-score   support

           0       0.97      1.00      0.98     41267
           1       0.58      0.13      0.21      1474

    accuracy                           0.97     42741
   macro avg       0.78      0.56      0.60     42741
weighted avg       0.96      0.97      0.96     42741


Confusion Matrix:
[[41132   135]
 [ 1287   187]]

Auto-sklearn leaderboard:
          rank  ensemble_weight           type    cost  duration
model_id                                                        
12           1              1.0  decision_tree  0.0322  3.585879
Biological evaluation:
The model shows poor detection of infected vines (recall: 0.13), indicating it fails to capture key biological signals. While spatial and historical features are included, the model lacks critical epidemiological predictors: temporal disease progression patterns, vector presence data (Spissistilus festinus), and spectral indicators of pre-symptomatic infection. The reliance on 2024 EVI and canopy metrics alone is insufficient for early detection.

Improve by incorporating: 1) Time-series analysis of EVI trajectories (2022-2024) to capture disease progress curves, 2) Vector proximity metrics using spatial coordinates, 3) Spectral indices sensitive to physiological changes (e.g., chlorophyll fluorescence), and 4) Vineyard age and management factors. Focus on features that reflect known GRBV epidemiology and pre-visual symptom development.

Iteration 13:
Label selected: redvine_count_2024
Features selected: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, longitude, latitude, spatial_lag_redvine_2023, spatial_lag_redvine_2022, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, block_variety, vineSpace, EVI_2024.07.10_CanopyArea_2024.07.10_interaction, EVI_2023.07.30_CanopyArea_2023.07.30_interaction, EVI_2023.07.30, CanopyArea_2023.07.30, EVI_2022.08.04, CanopyArea_2022.08.04
Preprocessing note: Re-add 2023.07.30 and 2022.08.04 base features to provide context for delta calculations. Ensure spatial lag features are computed using k=5 nearest neighbors with Euclidean distance on latitude/longitude. Use classification (redvine_count_2024 > 0) with class weighting. Set time limit to 240 seconds. Try gradient boosting specifically to capture complex interactions while maintaining interpretability.
Reasons for modeling suggestion: The persistent poor recall (13-65%) across iterations indicates the model is missing critical temporal context for the delta features. Re-adding the base EVI and CanopyArea values from 2023.07.30 and 2022.08.04 provides the necessary reference points for interpreting the delta values, which may improve the model's ability to detect disease-related physiological changes. This maintains the simplified yet comprehensive approach while addressing potential information loss from delta-only features.
Mechine Learning modeling result:
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
Features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'longitude', 'latitude', 'EVI_2023.07.30', 'CanopyArea_2023.07.30', 'EVI_2022.08.04', 'CanopyArea_2022.08.04', 'vineSpace', 'block_variety', 'EVI_delta_2023_to_2024', 'CanopyArea_delta_2023_to_2024', 'EVI_2024.07.10_CanopyArea_2024.07.10_interaction', 'EVI_2023.07.30_CanopyArea_2023.07.30_interaction', 'spatial_lag_redvine_2023', 'spatial_lag_redvine_2022', 'block_variety_encoded']

Classification Report:
              precision    recall  f1-score   support

           0       0.99      1.00      0.99     58456
           1       0.98      0.69      0.81      2243

    accuracy                           0.99     60699
   macro avg       0.99      0.84      0.90     60699
weighted avg       0.99      0.99      0.99     60699

Biological evaluation:
The results show strong performance but limited biological insight. The model relies heavily on historical infection data (redvine_count_2021-2023) rather than detecting early physiological changes. From epidemiological knowledge, virus infections cause spectral and physiological alterations before visible symptoms appear, but the selected EVI and canopy features don't adequately capture these pre-symptomatic changes.

Improve by: 1) Incorporating spectral indices sensitive to physiological stress (NPQI, flavonol indices) from the pre-August 2024 data, 2) Adding spatial features that account for vector-mediated spread patterns, and 3) Including temporal delta features that capture growth anomalies rather than absolute values. Focus on features that differentiate infected vines during the critical pre-symptomatic phase.

Iteration 14:
Label selected: redvine_count_2024
Features selected: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, longitude, latitude, spatial_lag_redvine_2023, spatial_lag_redvine_2022, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, block_variety, vineSpace, EVI_2024.07.10_CanopyArea_2024.07.10_interaction, EVI_2023.07.30_CanopyArea_2023.07.30_interaction, EVI_2023.07.30, CanopyArea_2023.07.30, EVI_2022.08.04, CanopyArea_2022.08.04
Preprocessing note: Use classification (redvine_count_2024 > 0) with class weighting. Set time limit to 180 seconds. Try gradient boosting specifically. Ensure spatial lag features are computed using k=5 nearest neighbors with Euclidean distance on latitude/longitude. Consider adding interaction terms between spatial lag features and EVI deltas to capture combined spatial-temporal disease patterns.
Reasons for modeling suggestion: The previous iteration showed excellent performance (F1=0.81 for disease class) but may be overfitting to historical patterns. Maintaining the comprehensive feature set while focusing on gradient boosting may better capture complex interactions. The spatial-temporal interaction terms could better model the vector-borne disease spread dynamics characteristic of redvine disease, while the 180-second limit balances exploration with efficiency.
Mechine Learning modeling result:
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
Features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'longitude', 'latitude', 'vineSpace', 'block_variety', 'EVI_2023.07.30', 'CanopyArea_2023.07.30', 'EVI_2022.08.04', 'CanopyArea_2022.08.04', 'spatial_lag_redvine_2023', 'spatial_lag_redvine_2022', 'EVI_delta_2023_to_2024', 'CanopyArea_delta_2023_to_2024', 'EVI_2024.07.10_CanopyArea_2024.07.10_interaction', 'EVI_2023.07.30_CanopyArea_2023.07.30_interaction']

Classification Report:
              precision    recall  f1-score   support

           0       0.96      1.00      0.98     11691
           1       0.25      0.00      0.01       449

    accuracy                           0.96     12140
   macro avg       0.61      0.50      0.49     12140
weighted avg       0.94      0.96      0.95     12140


Auto-sklearn models: {9: {'model_id': 9, 'rank': 1, 'cost': 0.03675864909390447, 'ensemble_weight': 1.0, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f5a69f3aeb0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f5a69db1250>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f5a69ca76d0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.028230610715648558, max_iter=16, random_state=1,
                            tol=0.0008024959726063024, warm_start=True)}}
Biological evaluation:
The results are not biologically meaningful. The model shows near-perfect performance for class 0 (healthy vines) but completely fails to detect diseased vines (recall=0.00 for class 1), indicating severe class imbalance issues and inadequate feature engineering for disease detection.

The model lacks critical epidemiological predictors: temporal disease progression patterns, spatial autocorrelation features that capture disease spread dynamics, and proper spectral indicators of physiological stress. Current features don't adequately represent the latency period, secondary spread mechanisms, or pre-symptomatic spectral changes known from vineyard virus epidemiology.

Improve by: incorporating spatial clustering metrics, calculating epidemic rate parameters from historical counts, adding spectral indices sensitive to viral stress (beyond simple EVI), and implementing proper class balancing techniques. Focus on features that capture the spatiotemporal progression patterns characteristic of grapevine virus spread.

Iteration 15:
Label selected: redvine_count_2024
Features selected: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, longitude, latitude, EVI_2023.07.30, CanopyArea_2023.07.30, EVI_2022.08.04, CanopyArea_2022.08.04, spatial_lag_redvine_2023, spatial_lag_redvine_2022, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, EVI_delta_2022_to_2023, CanopyArea_delta_2022_to_2023, weighted_sum_prior_counts, spatial_lag_weighted_sum, block_variety, vineSpace
Preprocessing note: Use classification (redvine_count_2024 > 0) with class weighting. Compute spatial lag features using k=5 nearest neighbors with Euclidean distance on latitude/longitude. Compute deltas: EVI_delta_2023_to_2024 = EVI_2024.07.10 - EVI_2023.07.30, CanopyArea_delta_2023_to_2024 = CanopyArea_2024.07.10 - CanopyArea_2023.07.30, EVI_delta_2022_to_2023 = EVI_2023.07.30 - EVI_2022.08.04, CanopyArea_delta_2022_to_2023 = CanopyArea_2023.07.30 - CanopyArea_2022.08.04. Compute weighted_sum_prior_counts = 0.5*redvine_count_2021 + 0.7*redvine_count_2022 + 0.9*redvine_count_2023. Set time limit to 300 seconds. Try gradient boosting algorithms specifically.
Reasons for modeling suggestion: The persistent poor recall across iterations indicates the model is missing critical epidemiological patterns. This comprehensive feature set combines historical infection pressure, spatial spread dynamics (through spatial lags), temporal physiological changes (through deltas), cultivar susceptibility, and vine spacing effects. The classification framing remains appropriate for disease detection, and gradient boosting may better capture the complex interactions in this high-dimensional feature space while addressing the severe class imbalance. The 300-second time limit allows sufficient exploration while maintaining efficiency.
Mechine Learning modeling result:
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
	Models besides current dummy model: 0
	Dummy models: 1
Features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'longitude', 'latitude', 'EVI_2023.07.30', 'CanopyArea_2023.07.30', 'EVI_2022.08.04', 'CanopyArea_2022.08.04', 'block_variety', 'vineSpace', 'EVI_delta_2023_to_2024', 'CanopyArea_delta_2023_to_2024', 'EVI_delta_2022_to_2023', 'CanopyArea_delta_2022_to_2023', 'weighted_sum_prior_counts', 'spatial_lag_redvine_2023', 'spatial_lag_redvine_2022', 'spatial_lag_weighted_sum']

Classification Report:
              precision    recall  f1-score   support

           0       0.97      1.00      0.98     11691
           1       0.52      0.11      0.18       449

    accuracy                           0.96     12140
   macro avg       0.74      0.55      0.58     12140
weighted avg       0.95      0.96      0.95     12140


Auto-sklearn models:
{121: {'model_id': 121, 'rank': 1, 'cost': 0.03475819032761307, 'ensemble_weight': 1.0, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f1042881e20>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f1042b51640>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f10429d1df0>, 'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=6,
                       min_samples_leaf=2, min_samples_split=20,
                       n_estimators=512, n_jobs=1, random_state=1,
                       warm_start=True)}}
Biological evaluation:
The model shows poor performance for disease detection (recall=0.11, F1=0.18), indicating insufficient biological signal capture. While spatial and temporal features were included, the model likely misses key epidemiological factors: vector population dynamics, climate influences on pathogen spread, and pre-symptomatic physiological changes detectable through spectral analysis.

Improve by incorporating: vector activity data (Spissistilus festinus presence), climate variables (temperature/precipitation lag effects), and hyperspectral indices beyond basic EVI that capture pre-visual stress responses. Focus on feature selection to prioritize biologically meaningful predictors of GRBV transmission and establishment rather than over-engineering derived features.

Iteration 16:
Label selected: redvine_count_2024
Features selected: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, longitude, latitude, EVI_2023.07.30, CanopyArea_2023.07.30, spatial_lag_redvine_2023, spatial_lag_redvine_2022, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, block_variety, vineSpace
Preprocessing note: Simplify feature set to core epidemiological drivers. Focus on spatial lags (k=5 neighbors), 2023-2024 deltas, and cultivar/spacing factors. Use classification (redvine_count_2024 > 0) with SMOTE for class imbalance. Set time limit to 240 seconds. Try Random Forest specifically to handle complex interactions while providing feature importance insights.
Reasons for modeling suggestion: Persistent poor recall (11-34%) indicates the model misses critical disease patterns. This simplified yet biologically relevant feature set focuses on spatial spread dynamics (spatial lags), temporal physiological changes (deltas), and host susceptibility factors while reducing overfitting from redundant features. SMOTE addresses severe class imbalance better than class weighting, and Random Forest provides robust handling of interactions while offering interpretability through feature importance.
Mechine Learning modeling result:
Features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'longitude', 'latitude', 'EVI_2023.07.30', 'CanopyArea_2023.07.30', 'block_variety', 'vineSpace', 'block_variety_encoded', 'spatial_lag_redvine_2023', 'spatial_lag_redvine_2022', 'EVI_delta_2023_to_2024', 'CanopyArea_delta_2023_to_2024']

Classification Report:
              precision    recall  f1-score   support

           0       0.97      1.00      0.98     41267
           1       0.69      0.15      0.25      1474

    accuracy                           0.97     42741
   macro avg       0.83      0.57      0.61     42741
weighted avg       0.96      0.97      0.96     42741


Auto-sklearn models:
{3: {'model_id': 3, 'rank': 1, 'cost': 0.03369130343230156, 'ensemble_weight': 0.02, 'voting_model': VotingClassifier(estimators=None, voting='soft'), 'estimators': [{'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f699c3418e0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f698d18a850>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f698d18adc0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.14268277711454813, max_iter=16, random_state=1,
                            tol=0.0002600768160857831, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f69ac3dd3a0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f699c34e1f0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f698ddd1730>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.14268277711454813, max_iter=16, random_state=1,
                            tol=0.0002600768160857831, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f6987c8bcd0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f69871a5340>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f69871a5250>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.14268277711454813, max_iter=16, random_state=1,
                            tol=0.0002600768160857831, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f6994072040>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f69874edd30>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f69874edbb0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.14268277711454813, max_iter=16, random_state=1,
                            tol=0.0002600768160857831, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f69ac659e80>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f699c168c10>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f699c1687f0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.14268277711454813, max_iter=16, random_state=1,
                            tol=0.0002600768160857831, warm_start=True)}]}, 33: {'model_id': 33, 'rank': 2, 'cost': 0.03206523010692308, 'ensemble_weight': 0.78, 'voting_model': VotingClassifier(estimators=None, voting='soft'), 'estimators': [{'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f6a3a76b4f0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f6a3a7a8610>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f6a3a7a8be0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.07868193096453042, loss='squared_hinge',
                            max_iter=32, random_state=1,
                            tol=0.0002748270257765496, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f6a3a6c22e0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f6987e07970>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f6987e07b20>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.07868193096453042, loss='squared_hinge',
                            max_iter=16, random_state=1,
                            tol=0.0002748270257765496, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f69ac5d66a0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f69a42ea2b0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f699c631820>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.07868193096453042, loss='squared_hinge',
                            max_iter=32, random_state=1,
                            tol=0.0002748270257765496, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f6a3a7376d0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f6987e00ca0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f6987736e80>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.07868193096453042, loss='squared_hinge',
                            max_iter=32, random_state=1,
                            tol=0.0002748270257765496, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f6994735bb0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f6994730400>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f6994730a00>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.07868193096453042, loss='squared_hinge',
                            max_iter=16, random_state=1,
                            tol=0.0002748270257765496, warm_start=True)}]}, 64: {'model_id': 64, 'rank': 3, 'cost': 0.03427037271004423, 'ensemble_weight': 0.04, 'voting_model': VotingClassifier(estimators=None, voting='soft'), 'estimators': [{'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f6a3a9d2c10>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f69871b0460>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f69871b06d0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=3.1120319146690886e-05, average=True,
                            loss='squared_hinge', max_iter=16, random_state=1,
                            tol=0.05741570185760213, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f69ac41d400>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f698cf0f5b0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f698cf0ffd0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=3.1120319146690886e-05, average=True,
                            loss='squared_hinge', max_iter=16, random_state=1,
                            tol=0.05741570185760213, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f698d19bf70>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f698d180430>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f698d1808e0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=3.1120319146690886e-05, average=True,
                            loss='squared_hinge', max_iter=16, random_state=1,
                            tol=0.05741570185760213, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f69a4341df0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f69944f7f70>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f69944f76d0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=3.1120319146690886e-05, average=True,
                            loss='squared_hinge', max_iter=16, random_state=1,
                            tol=0.05741570185760213, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f69d47e8460>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f69ac1fd130>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f69ac1fd2e0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=3.1120319146690886e-05, average=True,
                            loss='squared_hinge', max_iter=16, random_state=1,
                            tol=0.05741570185760213, warm_start=True)}]}, 98: {'model_id': 98, 'rank': 4, 'cost': 0.03358016892445192, 'ensemble_weight': 0.16, 'voting_model': VotingClassifier(estimators=None, voting='soft'), 'estimators': [{'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f69871a5610>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f69877691c0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f6987769ac0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.03685558379950674, loss='squared_hinge',
                            max_iter=16, random_state=1,
                            tol=0.0016540929625895179, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f698d1ab3d0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f698d67c1c0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f698d67cd60>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.03685558379950674, loss='squared_hinge',
                            max_iter=16, random_state=1,
                            tol=0.0016540929625895179, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f69ac3b3280>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f6994435a00>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f6994435a30>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.03685558379950674, loss='squared_hinge',
                            max_iter=16, random_state=1,
                            tol=0.0016540929625895179, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f69ac67c6d0>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f69a4706bb0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f69a4706fd0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.03685558379950674, loss='squared_hinge',
                            max_iter=16, random_state=1,
                            tol=0.0016540929625895179, warm_start=True)}, {'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f69a478ef10>, 'balancing': Balancing(random_state=1), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f69a4146a00>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f69a4146040>, 'sklearn_classifier': PassiveAggressiveClassifier(C=0.03685558379950674, loss='squared_hinge',
                            max_iter=16, random_state=1,
                            tol=0.0016540929625895179, warm_start=True)}]}}
Biological evaluation:
The model shows poor recall (0.15) for disease detection despite high overall accuracy, indicating it's missing most infections. This is biologically problematic for early detection. The dataset underutilizes key epidemiological factors: spatial patterns (neighbor infections), temporal disease progression, and spectral indicators of physiological stress.

Improve by: 1) Incorporating spatial autoregressive terms using latitude/longitude to capture disease gradients, 2) Adding EVI/CanopyArea temporal derivatives to detect growth anomalies, 3) Including prior year infection counts as strong predictors since disease persistence is common. Focus on features that capture the spatiotemporal dynamics and physiological stress responses characteristic of plant disease epidemiology.

Iteration 17:
Label selected: redvine_count_2024
Features selected: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, longitude, latitude, spatial_lag_redvine_2023, spatial_lag_redvine_2022, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, block_variety, vineSpace, EVI_2024.07.10_CanopyArea_2024.07.10_interaction
Preprocessing note: Try regression instead of classification since the count nature of the target may be better captured. Use Poisson regression or gradient boosting for count data. Set time limit to 180 seconds. Focus on spatial lags and recent 2024 features before August.
Reasons for modeling suggestion: The persistent poor recall across classification iterations suggests the binary framing may be losing information from the count nature of the target. Regression better captures disease intensity while maintaining the critical spatial and temporal features that showed promise in previous iterations. The simplified feature set focuses on the most predictive elements while reducing overfitting.
Mechine Learning modeling result:
Warning: Missing features: ['spatial_lag_redvine_2023', 'spatial_lag_redvine_2022', 'EVI_delta_2023_to_2024', 'CanopyArea_delta_2023_to_2024', 'EVI_2024.07.10_CanopyArea_2024.07.10_interaction']
Error: No valid data remaining after cleaning.
Biological evaluation:
The result is not biologically meaningful due to missing spatial and temporal features critical for disease epidemiology. The dataset contains rich temporal EVI and canopy data that should capture physiological changes from infection, but derived features weren't properly computed.

Improvements: Calculate spatial lags using longitude/latitude to capture disease aggregation patterns. Compute temporal deltas (2023-2024) to track vegetation decline from infection. Include interaction terms between EVI and canopy metrics. Prioritize features that reflect known epidemiological patterns: spatial aggregation, temporal progression, and host physiological responses. Use block variety and vine spacing as fixed effects for host susceptibility differences.

Iteration 18:
Label selected: redvine_count_2024
Features selected: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, longitude, latitude, EVI_2023.07.30, CanopyArea_2023.07.30, EVI_2022.08.04, CanopyArea_2022.08.04, block_variety, vineSpace
Preprocessing note: Use regression (Poisson or negative binomial) instead of classification to better capture count nature of target. Compute spatial lag features for redvine counts (k=5 neighbors using latitude/longitude) and temporal deltas (EVI_2024.07.10 - EVI_2023.07.30, CanopyArea_2024.07.10 - CanopyArea_2023.07.30). Set time limit to 300 seconds. Focus on spatial-temporal patterns rather than complex feature engineering.
Reasons for modeling suggestion: The persistent poor recall in classification iterations suggests the binary framing loses important count information. Regression better captures disease intensity while maintaining biological relevance. Spatial lags and temporal deltas are critical for vector-borne disease epidemiology, and the simplified feature set reduces overfitting while focusing on the most predictive elements from 2024 pre-August data.
Mechine Learning modeling result:
Features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'longitude', 'latitude', 'EVI_2023.07.30', 'CanopyArea_2023.07.30', 'EVI_2022.08.04', 'CanopyArea_2022.08.04', 'vineSpace', 'redvine_count_2021_spatial_lag_k5', 'redvine_count_2022_spatial_lag_k5', 'redvine_count_2023_spatial_lag_k5', 'EVI_delta', 'CanopyArea_delta', 'block_variety_MAL', 'block_variety_PS']

Model Evaluation:
Mean Squared Error: 0.0426
Mean Absolute Error: 0.0586
R² Score: 0.0987

Auto-sklearn leaderboard:
          rank  ensemble_weight                 type      cost  duration
model_id                                                                
127          1             0.62  k_nearest_neighbors  0.058377  0.826046
73           2             0.38  k_nearest_neighbors  0.058721  4.092261

Best model description:
{73: {'model_id': 73, 'rank': 1, 'cost': 0.0587207488299532, 'ensemble_weight': 0.38, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f7b60b02d30>, 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f7b603a8cd0>, 'regressor': <autosklearn.pipeline.components.regression.RegressorChoice object at 0x7f7b603a86a0>, 'sklearn_regressor': KNeighborsRegressor(n_neighbors=1, p=1)}, 127: {'model_id': 127, 'rank': 2, 'cost': 0.058377076702050036, 'ensemble_weight': 0.62, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f7b5f662730>, 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f7b5f91cee0>, 'regressor': <autosklearn.pipeline.components.regression.RegressorChoice object at 0x7f7b5f91c160>, 'sklearn_regressor': KNeighborsRegressor(n_neighbors=7, p=1, weights='distance')}}
Biological evaluation:
The model shows poor predictive performance (R²=0.099) despite using relevant features. K-nearest neighbors models with spatial lags suggest spatial dependence, which aligns with known disease gradient patterns. However, the low R² indicates insufficient capture of key epidemiological drivers.

Biologically, virus diseases like red blotch show latency periods (4-12 months) and vector-mediated spread. The model lacks temporal progression features that capture infection dynamics and vector activity periods. Include more time-series EVI/CanopyArea data from critical growth stages and incorporate precipitation/temperature lag variables (3-4 year lag effects documented). Focus on spatial aggregation features that better reflect vector transmission patterns rather than simple spatial lags.

Iteration 19:
Label selected: redvine_count_2024
Features selected: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, longitude, latitude, spatial_lag_redvine_2023, spatial_lag_redvine_2022, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, block_variety, vineSpace
Preprocessing note: Use classification (redvine_count_2024 > 0) with class weighting. Ensure spatial lag features are computed using k=5 nearest neighbors with Euclidean distance on latitude/longitude. Compute deltas: EVI_delta_2023_to_2024 = EVI_2024.07.10 - EVI_2023.07.30, CanopyArea_delta_2023_to_2024 = CanopyArea_2024.07.10 - CanopyArea_2023.07.30. Set time limit to 300 seconds. Try gradient boosting specifically to capture complex interactions while addressing class imbalance.
Reasons for modeling suggestion: The regression approach in iteration 18 showed poor performance (R²=0.099), indicating classification may be more suitable for this disease detection task. This feature set combines the most biologically relevant elements from previous iterations: historical infection counts, spatial spread patterns, recent spectral changes, and host susceptibility factors. The classification framing with class weighting addresses the severe imbalance while maintaining focus on disease detection. Gradient boosting may better capture the complex interactions in this high-dimensional feature space.
Mechine Learning modeling result:
Features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'longitude', 'latitude', 'vineSpace', 'EVI_delta_2023_to_2024', 'CanopyArea_delta_2023_to_2024', 'block_variety_encoded', 'spatial_lag_redvine_2023', 'spatial_lag_redvine_2022']

AutoSklearn model summary:
auto-sklearn results:
  Dataset name: redvine_classification
  Metric: balanced_accuracy
  Best validation score: 0.898408
  Number of target algorithm runs: 149
  Number of successful target algorithm runs: 65
  Number of crashed target algorithm runs: 46
  Number of target algorithms that exceeded the time limit: 34
  Number of target algorithms that exceeded the memory limit: 4


Classification Report:
              precision    recall  f1-score   support

           0       1.00      0.90      0.95     57493
           1       0.22      0.89      0.35      1805

    accuracy                           0.90     59298
   macro avg       0.61      0.89      0.65     59298
weighted avg       0.97      0.90      0.93     59298


Best model: {7: {'model_id': 7, 'rank': 1, 'cost': 0.17104375346108536, 'ensemble_weight': 0.04, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f6e3169ad30>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f6e31610820>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f6e315e1550>, 'sklearn_classifier': ExtraTreesClassifier(bootstrap=True, criterion='entropy', max_features=2,
                     min_samples_leaf=9, min_samples_split=17, n_estimators=512,
                     n_jobs=1, random_state=1, warm_start=True)}, 11: {'model_id': 11, 'rank': 2, 'cost': 0.22142248451800084, 'ensemble_weight': 0.02, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f6e31721af0>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f6da47866d0>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f6d9c37efa0>, 'sklearn_classifier': SGDClassifier(alpha=8.013021928739325e-05, average=True,
              epsilon=0.00034080145245280494, eta0=0.00010669196521726539,
              learning_rate='constant', loss='modified_huber', max_iter=16,
              penalty='l1', random_state=1, tol=0.014504437992696202,
              warm_start=True)}, 16: {'model_id': 16, 'rank': 3, 'cost': 0.10366192478508496, 'ensemble_weight': 0.84, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f6e317143a0>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f6d941d1310>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f6d941d1040>, 'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=3, min_samples_leaf=11,
                     min_samples_split=20, n_estimators=512, n_jobs=1,
                     random_state=1, warm_start=True)}, 34: {'model_id': 34, 'rank': 4, 'cost': 0.33427007448061996, 'ensemble_weight': 0.06, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f6e315dd700>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f6d9c7c8d90>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f6d9c7c8370>, 'sklearn_classifier': BernoulliNB(alpha=11.7223149369688, fit_prior=False)}, 49: {'model_id': 49, 'rank': 5, 'cost': 0.12319777288642098, 'ensemble_weight': 0.04, 'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7f6d8c4cf400>, 'balancing': Balancing(random_state=1, strategy='weighting'), 'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7f6d9450e730>, 'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7f6d8673d6d0>, 'sklearn_classifier': PassiveAggressiveClassifier(C=9.007935066110259e-05, loss='squared_hinge',
                            max_iter=16, random_state=1,
                            tol=0.0028781776022860864, warm_start=True)}}
Biological evaluation:
The model shows strong performance (90% accuracy) but has concerning biological limitations. The extremely high recall (89%) for disease detection but low precision (22%) suggests over-prediction of infection, likely due to insufficient incorporation of key epidemiological factors.

The model lacks critical spatial-temporal dynamics: no incorporation of neighborhood infection pressure from previous years, vector transmission patterns, or environmental drivers like temperature/precipitation that influence GRBV spread. The selected EVI and canopy features may not capture the specific physiological changes associated with red blotch virus infection.

Improve by incorporating: 1) spatial autoregressive terms for infection spread, 2) lagged weather variables affecting vector populations, 3) spectral indices specifically sensitive to viral stress (e.g., chlorophyll fluorescence or pigment indices), and 4) vineyard age and management history factors.

Iteration 20:
Label selected: redvine_count_2024
Features selected: redvine_count_2021, redvine_count_2022, redvine_count_2023, girdle_presence_2023, EVI_2024.06.04, EVI_2024.07.10, CanopyArea_2024.06.04, CanopyArea_2024.07.10, longitude, latitude, spatial_lag_redvine_2023, spatial_lag_redvine_2022, EVI_delta_2023_to_2024, CanopyArea_delta_2023_to_2024, block_variety, vineSpace
Preprocessing note: Use classification (redvine_count_2024 > 0) with SMOTE for class imbalance. Set time limit to 300 seconds. Try Random Forest specifically to handle spatial-temporal interactions and provide feature importance insights. Ensure spatial lag features are computed using k=5 nearest neighbors with Euclidean distance on latitude/longitude coordinates. Compute deltas: EVI_delta_2023_to_2024 = EVI_2024.07.10 - EVI_2023.07.30, CanopyArea_delta_2023_to_2024 = CanopyArea_2024.07.10 - CanopyArea_2023.07.30.
Reasons for modeling suggestion: The previous iteration showed promising recall (89%) but poor precision (22%), indicating over-prediction of disease. This feature set combines the most biologically relevant elements from successful iterations: historical infection pressure, spatial spread patterns, recent spectral changes, and host susceptibility factors. SMOTE addresses class imbalance more effectively than class weighting, and Random Forest provides robust handling of interactions while offering interpretability through feature importance. The spatial-temporal features capture critical epidemiological patterns for vector-borne disease detection while maintaining computational feasibility.
Mechine Learning modeling result:
Features used: ['redvine_count_2021', 'redvine_count_2022', 'redvine_count_2023', 'girdle_presence_2023', 'EVI_2024.06.04', 'EVI_2024.07.10', 'CanopyArea_2024.06.04', 'CanopyArea_2024.07.10', 'longitude', 'latitude', 'block_variety', 'vineSpace', 'EVI_delta_2023_to_2024', 'CanopyArea_delta_2023_to_2024', 'spatial_lag_redvine_2023', 'spatial_lag_redvine_2022']

Classification Report:
              precision    recall  f1-score   support

           0       0.98      0.95      0.97     57493
           1       0.95      0.98      0.97     57493

    accuracy                           0.97    114986
   macro avg       0.97      0.97      0.97    114986
weighted avg       0.97      0.97      0.97    114986


Confusion Matrix:
[[54654  2839]
 [  887 56606]]

Auto-sklearn ensemble score: 0.9675960551719339
Biological evaluation:
The results are biologically meaningful with excellent predictive performance (97% accuracy). The feature selection appropriately incorporates key epidemiological principles: historical infection patterns (redvine_count years), spatial autocorrelation (spatial lag features), host physiological status (EVI and canopy metrics), and cultivar susceptibility (block_variety).

However, the model could be improved by incorporating more explicit temporal dynamics. Consider adding:
- EVI/CanopyArea trends across multiple timepoints (not just deltas)
- Interaction terms between spatial lag features and current physiological metrics
- Environmental covariates (temperature/precipitation data) known to influence disease spread

The high performance suggests sufficient data utilization, but incorporating these additional temporal and environmental dimensions would strengthen biological interpretability and potentially improve robustness for future predictions.

=== Final summary report ===
Overall, the experiment achieved strong overall accuracy (97% in the final iteration) but reveals critical limitations in biological relevance and practical utility for redvine disease prediction. The model excels at identifying healthy vines (high precision and recall for class 0) but shows inconsistent performance in detecting infected vines across iterations, with recall fluctuating between 11-89% and precision often below 30%. This indicates the model frequently over-predicts disease while missing true infections—a significant problem for agricultural applications where false negatives enable disease spread and false negatives trigger unnecessary interventions.

Key strengths include the incorporation of epidemiologically sound features: historical infection counts (capturing disease carryover), spatial lags (modeling vector-mediated spread), temporal vegetation deltas (detecting physiological decline), and host factors (variety and spacing). The best iteration (20) successfully balanced these elements with SMOTE addressing class imbalance.

However, major limitations persist:
1. **Over-reliance on historical counts**: The model often acts as a "persistence forecast" rather than detecting new infections
2. **Missing critical biological signals**: No incorporation of vector population data, environmental drivers (temperature/precipitation), or hyperspectral indices sensitive to pre-symptomatic infection
3. **Feature engineering instability**: Frequent missing features and inconsistent implementation of spatial-temporal terms
4. **Algorithm inconsistency**: Auto-sklearn's changing model selections between iterations reduced comparability

For future improvement:
1. **Incorporate vector & environmental data**: Add Spissistilus festinus presence metrics and 3-4 year climate lags
2. **Use disease-specific spectral indices**: Replace generic EVI with chlorophyll fluorescence or flavonol indices sensitive to viral infection
3. **Implement spatial epidemiology features**: Develop proper spatial autoregressive terms and dispersal kernels
4. **Focus on early detection**: Prioritize 2024 pre-August features that capture pre-symptomatic changes rather than historical patterns
5. **Standardize preprocessing**: Ensure consistent computation of spatial lags and temporal deltas across iterations

The experiment demonstrates that while machine learning can achieve high accuracy, biological relevance requires deeper domain integration—particularly for vector-borne plant diseases where spatial-temporal dynamics and latent infections dominate epidemiology.
